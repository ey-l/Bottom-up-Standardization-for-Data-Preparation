import warnings
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.feature_selection import RFE
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from statsmodels.stats.outliers_influence import variance_inflation_factor
_input2 = pd.read_csv('data/input/spaceship-titanic/sample_submission.csv')
_input0 = pd.read_csv('data/input/spaceship-titanic/test.csv')
_input1 = pd.read_csv('data/input/spaceship-titanic/train.csv')
_input2.head()
_input0.head()
_input1.head()
_input1.info()
print(_input2.shape)
print(_input0.shape)
print(_input1.shape)
_input1.HomePlanet.value_counts()
_input1.Destination.value_counts()
_input1.Cabin.value_counts()
_input1 = _input1.drop(['Cabin', 'Name'], axis=1, inplace=False)
_input0 = _input0.drop(['Cabin', 'Name'], axis=1, inplace=False)
_input1.isnull().sum()
s_train1 = _input1
_input1 = _input1.dropna()
_input0['VIP'] = _input0['VIP'].fillna(0)
_input0['VIP'] = _input0['VIP'].astype(np.int64)
_input0['CryoSleep'] = _input0['CryoSleep'].fillna(0)
_input0['CryoSleep'] = _input0['CryoSleep'].astype(np.int64)
_input0.isnull().sum()
temp2 = _input0.select_dtypes(include=np.number)
temp2 = list(temp2)
for i in temp2:
    _input0[i] = _input0[i].fillna(_input0[i].mean())
_input0['HomePlanet'] = _input0['HomePlanet'].fillna(_input0['HomePlanet'].mode()[0])
_input0['Destination'] = _input0['Destination'].fillna(_input0['Destination'].mode()[0])
_input0.isnull().sum()
_input0.isnull().sum()
print(_input2.shape)
print(_input0.shape)
print(_input1.shape)
numeric_tempcol = _input1.select_dtypes(include=np.number)
temp = _input1.select_dtypes(include=np.number)
col = list(temp.columns)
n = np.arange(0, len(col))
plt.figure(figsize=(20, 15))
for (i, j) in zip(col, n):
    plt.subplot(3, 3, j + 1)
    sns.boxplot(_input1[i])
plt.tight_layout(pad=1.08, h_pad=3)
temp2 = _input0.select_dtypes(include=np.number)
col2 = list(temp2.columns)
n2 = np.arange(0, len(col2))
plt.figure(figsize=(15, 9))
for (i, j2) in zip(col2, n2):
    plt.subplot(2, 4, j2 + 1)
    sns.boxplot(_input0[i], color='green')
plt.tight_layout(pad=1.08, h_pad=3, w_pad=3)
_input1['Age'] = _input1['Age'].apply(lambda x: 60 if x > 60 else x)
_input0['Age'] = _input0['Age'].apply(lambda x: 60 if x > 60 else x)
_input1['RoomService'] = _input1['RoomService'].apply(lambda x: 200 if x > 200 else x)
_input0['RoomService'] = _input0['RoomService'].apply(lambda x: 200 if x > 200 else x)
_input1['FoodCourt'] = _input1['FoodCourt'].apply(lambda x: 200 if x > 200 else x)
_input0['FoodCourt'] = _input0['FoodCourt'].apply(lambda x: 200 if x > 200 else x)
_input1['ShoppingMall'] = _input1['ShoppingMall'].apply(lambda x: 200 if x > 200 else x)
_input0['ShoppingMall'] = _input0['ShoppingMall'].apply(lambda x: 200 if x > 200 else x)
_input1['Spa'] = _input1['Spa'].apply(lambda x: 200 if x > 200 else x)
_input0['Spa'] = _input0['Spa'].apply(lambda x: 200 if x > 200 else x)
_input1['VRDeck'] = _input1['VRDeck'].apply(lambda x: 200 if x > 200 else x)
_input0['VRDeck'] = _input0['VRDeck'].apply(lambda x: 200 if x > 200 else x)
_input1['Transported'] = _input1['Transported'].apply(lambda x: 1 if x == True else 0)
_input1['CryoSleep'] = _input1['CryoSleep'].apply(lambda x: 1 if x == True else 0)
_input0['CryoSleep'] = _input0['CryoSleep'].apply(lambda x: 1 if x == True else 0)
_input1['VIP'] = _input1['VIP'].apply(lambda x: 1 if x == True else 0)
_input0['VIP'] = _input0['VIP'].apply(lambda x: 1 if x == True else 0)
_input1.info()
sns.set_style('darkgrid')
sns.distplot(_input1['VRDeck'])
plt.figure(figsize=(15, 7))
plt.subplot(2, 4, 1)
sns.barplot(data=_input1, x='VIP', y='VRDeck', hue='Transported')
plt.subplot(2, 4, 2)
sns.barplot(data=_input1, x='VIP', y='Spa', hue='Transported')
plt.subplot(2, 4, 3)
sns.barplot(data=_input1, x='CryoSleep', y='VIP', hue='Transported')
plt.subplot(2, 4, 4)
sns.barplot(data=_input1, x='CryoSleep', y='VRDeck', hue='Transported')
plt.subplot(2, 4, 5)
sns.barplot(data=_input1, x='VIP', y='FoodCourt', palette='hls')
plt.subplot(2, 4, 6)
sns.barplot(data=_input1, x='Transported', y='RoomService', palette='hls')
plt.subplot(2, 4, 7)
sns.barplot(data=_input1, x='Transported', y='Age', palette='hls')
plt.subplot(2, 4, 8)
sns.barplot(data=_input1, x='CryoSleep', y='VRDeck', palette='hls')
plt.tight_layout()
sns.jointplot(data=_input1, x='Age', y='ShoppingMall', color='salmon')
_input0.shape
dummy_1 = pd.get_dummies(data=_input1, columns=['HomePlanet'], drop_first=True)
dummy_2 = pd.get_dummies(data=dummy_1, columns=['Destination'], drop_first=True)
_input1 = dummy_2
_input1.head()
dummy_t1 = pd.get_dummies(data=_input0, columns=['HomePlanet'], drop_first=True)
dummy_t2 = pd.get_dummies(data=dummy_t1, columns=['Destination'], drop_first=True)
_input0 = dummy_t2
_input0.head()
sc = StandardScaler()
a = list(numeric_tempcol.columns)
_input1[a] = sc.fit_transform(_input1[a])
_input0[a] = sc.fit_transform(_input0[a])
plt.figure(figsize=(12, 7), facecolor='lightgrey')
sns.heatmap(_input1[a].corr(), annot=True, cmap='terrain_r', linecolor='black', linewidth='0.1')
train_y = _input1.pop('Transported')
s_train1 = _input1.iloc[:, 1:]
s_test1 = _input0.iloc[:, 1:]
s_train_const = sm.add_constant(s_train1)
lr1 = sm.GLM(train_y, s_train_const, family=sm.families.Binomial())