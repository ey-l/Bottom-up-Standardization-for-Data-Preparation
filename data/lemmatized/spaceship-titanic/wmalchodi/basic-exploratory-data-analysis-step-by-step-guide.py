import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import datetime as dt
import warnings
import itertools
import statsmodels.api as sm
import statsmodels.formula.api as smf
from statsmodels.graphics.factorplots import interaction_plot
from scipy.stats import iqr
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_validate
from sklearn.ensemble import RandomForestClassifier
warnings.filterwarnings('ignore')
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
sns.set_style('darkgrid')
_input1 = pd.read_csv('data/input/spaceship-titanic/train.csv')
_input1.head()
_input0 = pd.read_csv('data/input/spaceship-titanic/test.csv')
_input0.head()
_input1.dtypes
_input1['Transported'].isnull().sum()
_input1['Transported'].value_counts(normalize=True)
_input1.isna().sum()
_input0.isna().sum()
_input1['HomePlanet'].value_counts(normalize=True)
_input1['HomePlanet'] = np.where(_input1['HomePlanet'].isnull(), 'Unknown', _input1['HomePlanet'])
_input0['HomePlanet'] = np.where(_input0['HomePlanet'].isnull(), 'Unknown', _input0['HomePlanet'])
_input1['HomePlanet'].value_counts(normalize=True)
_input0['HomePlanet'].value_counts(normalize=True)
(fig, ax) = plt.subplots(figsize=(6, 6))
sns.histplot(data=_input1, multiple='fill', x='HomePlanet', kde=False, stat='proportion', palette='pastel', hue='Transported', element='bars', legend=True, discrete=True)
plt.title('Proportion of Transported Passengers for Each HomePlanet', fontsize=15)
plt.ylabel('Proportion', fontsize=10)
plt.xlabel('Home Planet', fontsize=10)
_input1['CryoSleep'].value_counts(normalize=True)
_input1['CryoSleep'] = np.where(_input1['CryoSleep'] == True, 'yes', np.where(_input1['CryoSleep'] == False, 'no', 'unknown'))
_input0['CryoSleep'] = np.where(_input0['CryoSleep'] == True, 'yes', np.where(_input0['CryoSleep'] == False, 'no', 'unknown'))
_input1['CryoSleep'].value_counts(normalize=True)
_input0['CryoSleep'].value_counts(normalize=True)
(fig, ax) = plt.subplots(figsize=(6, 6))
sns.histplot(data=_input1, multiple='fill', x='CryoSleep', kde=False, stat='proportion', palette='pastel', hue='Transported', element='bars', legend=True, discrete=True)
plt.title('Proportion of Transported Passengers for Each CryoSleep', fontsize=15)
plt.ylabel('Proportion', fontsize=10)
plt.xlabel('CryoSleep', fontsize=10)
_input1['Cabin'] = np.where(_input1['Cabin'].isnull(), '-1/-1/-1', _input1['Cabin'])
_input0['Cabin'] = np.where(_input0['Cabin'].isnull(), '-1/-1/-1', _input0['Cabin'])
_input1['CabinDeck'] = _input1['Cabin'].astype(str).str[0]
_input0['CabinDeck'] = _input0['Cabin'].astype(str).str[0]
_input1['CabinDeck'].value_counts(normalize=True)
_input0['CabinDeck'].value_counts(normalize=True)
_input1['CabinDeck'] = np.where(_input1['CabinDeck'] == '-', 'Unknown', _input1['CabinDeck'])
_input0['CabinDeck'] = np.where(_input0['CabinDeck'] == '-', 'Unknown', _input0['CabinDeck'])
_input1['CabinDeck'].value_counts(normalize=True)
(fig, ax) = plt.subplots(figsize=(6, 6))
sns.histplot(data=_input1, multiple='fill', x='CabinDeck', kde=False, stat='proportion', palette='pastel', hue='Transported', element='bars', legend=True, discrete=True)
plt.title('Proportion of Transported Passengers for Each CabinDeck', fontsize=15)
plt.ylabel('Proportion', fontsize=10)
plt.xlabel('Cabin Deck', fontsize=10)
_input1['CabinSide'] = _input1['Cabin'].astype(str).str[-1]
_input0['CabinSide'] = _input0['Cabin'].astype(str).str[-1]
_input1['CabinSide'].value_counts(normalize=True)
_input0['CabinSide'].value_counts(normalize=True)
_input1['CabinSide'] = np.where(_input1['CabinSide'] == '1', 'Unknown', _input1['CabinSide'])
_input0['CabinSide'] = np.where(_input0['CabinSide'] == '1', 'Unknown', _input0['CabinSide'])
_input1['CabinSide'].value_counts(normalize=True)
(fig, ax) = plt.subplots(figsize=(6, 6))
sns.histplot(data=_input1, multiple='fill', x='CabinSide', kde=False, stat='proportion', palette='pastel', hue='Transported', element='bars', legend=True, discrete=True)
plt.title('Proportion of Transported Passengers for Each CabinSide', fontsize=15)
plt.ylabel('Proportion', fontsize=10)
plt.xlabel('Cabin Side', fontsize=10)
_input1['Destination'].value_counts(normalize=True)
_input1['Destination'] = np.where(_input1['Destination'].isnull(), 'Unknown', _input1['Destination'])
_input0['Destination'] = np.where(_input0['Destination'].isnull(), 'Unknown', _input0['Destination'])
_input1['Destination'].value_counts(normalize=True)
_input0['Destination'].value_counts(normalize=True)
(fig, ax) = plt.subplots(figsize=(6, 6))
sns.histplot(data=_input1, multiple='fill', x='Destination', kde=False, stat='proportion', palette='pastel', hue='Transported', element='bars', legend=True, discrete=True)
plt.title('Proportion of Transported Passengers for Each Destination', fontsize=15)
plt.ylabel('Proportion', fontsize=10)
plt.xlabel('Destination', fontsize=10)
_input1['Age'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
np.sum(_input1['Age'] == 0)
_input1['Age'] = np.where(_input1['Age'].isnull(), _input1['Age'].median(), _input1['Age'])
_input0['Age'] = np.where(_input0['Age'].isnull(), _input1['Age'].median(), _input0['Age'])
_input1['Age'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input0['Age'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input1['VIP'].value_counts()
_input1['VIP'] = np.where(_input1['VIP'] == True, 1, 0)
_input0['VIP'] = np.where(_input0['VIP'] == True, 1, 0)
_input1['VIP'].value_counts(normalize=True)
_input0['VIP'].value_counts(normalize=True)
_input1['RoomService'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input1['RoomService'] = np.where(_input1['RoomService'].isnull(), _input1['RoomService'].median(), _input1['RoomService'])
_input0['RoomService'] = np.where(_input0['RoomService'].isnull(), _input1['RoomService'].median(), _input0['RoomService'])
_input1['RoomService'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input0['RoomService'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input1['FoodCourt'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input1['FoodCourt'] = np.where(_input1['FoodCourt'].isnull(), _input1['FoodCourt'].median(), _input1['FoodCourt'])
_input0['FoodCourt'] = np.where(_input0['FoodCourt'].isnull(), _input1['FoodCourt'].median(), _input0['FoodCourt'])
_input1['FoodCourt'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input0['FoodCourt'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input1['ShoppingMall'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input1['ShoppingMall'] = np.where(_input1['ShoppingMall'].isnull(), _input1['ShoppingMall'].median(), _input1['ShoppingMall'])
_input0['ShoppingMall'] = np.where(_input0['ShoppingMall'].isnull(), _input1['ShoppingMall'].median(), _input0['ShoppingMall'])
_input1['ShoppingMall'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input0['ShoppingMall'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input1['Spa'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input1['Spa'] = np.where(_input1['Spa'].isnull(), _input1['Spa'].median(), _input1['Spa'])
_input0['Spa'] = np.where(_input0['Spa'].isnull(), _input1['Spa'].median(), _input0['Spa'])
_input1['Spa'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input0['Spa'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input1['VRDeck'].describe()
_input1['VRDeck'] = np.where(_input1['VRDeck'].isnull(), _input1['VRDeck'].median(), _input1['VRDeck'])
_input0['VRDeck'] = np.where(_input0['VRDeck'].isnull(), _input1['VRDeck'].median(), _input0['VRDeck'])
_input1['VRDeck'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
_input0['VRDeck'].describe(percentiles=[0.1, 0.25, 0.5, 0.75, 0.9, 0.99])
name_check = _input1[_input1['Name'] == 'Grake Porki']
name_check
(fig, ax) = plt.subplots()
age_plot = sns.distplot(_input1.Age, hist_kws=dict(edgecolor='black'))
plt.title('Age Distribution', fontsize=15)
plt.ylabel('Percentage', fontsize=10)
plt.xlabel('Age', fontsize=10)
age_iqr = iqr(_input1['Age'])
age_iqr_edge = age_iqr * 1.5
age_iqr_edge
(fig, axes) = plt.subplots(2, 3, figsize=(12, 12), constrained_layout=True)
room_plot = sns.distplot(_input1.RoomService, hist_kws=dict(edgecolor='black'), ax=axes[0, 0])
axes[0, 0].set_title('Room Service Distribution', fontsize=15)
axes[0, 0].set_ylabel('Percentage', fontsize=10)
axes[0, 0].set_xlabel('Amount', fontsize=10)
food_plot = sns.distplot(_input1.FoodCourt, hist_kws=dict(edgecolor='black'), ax=axes[0, 1], color='red')
axes[0, 1].set_title('Food Court Distribution', fontsize=15)
axes[0, 1].set_ylabel('Percentage', fontsize=10)
axes[0, 1].set_xlabel('Amount', fontsize=10)
shop_plot = sns.distplot(_input1.ShoppingMall, hist_kws=dict(edgecolor='black'), ax=axes[0, 2], color='green')
axes[0, 2].set_title('Shopping Mall Distribution', fontsize=15)
axes[0, 2].set_ylabel('Percentage', fontsize=10)
axes[0, 2].set_xlabel('Amount', fontsize=10)
spa_plot = sns.distplot(_input1.Spa, hist_kws=dict(edgecolor='black'), ax=axes[1, 0], color='orange')
axes[1, 0].set_title('Spa Distribution', fontsize=15)
axes[1, 0].set_ylabel('Percentage', fontsize=10)
axes[1, 0].set_xlabel('Amount', fontsize=10)
vrdeck_plot = sns.distplot(_input1.VRDeck, hist_kws=dict(edgecolor='black'), ax=axes[1, 1], color='purple')
axes[1, 1].set_title('VRDeck Distribution', fontsize=15)
axes[1, 1].set_ylabel('Percentage', fontsize=10)
axes[1, 1].set_xlabel('Amount', fontsize=10)
fig.delaxes(axes[1, 2])
cap_list = ['RoomService_Capped', 'FoodCourt_Capped', 'ShoppingMall_Capped', 'Spa_Capped', 'VRDeck_Capped']
var_list = ['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']
for (i, j) in zip(cap_list, var_list):
    _input1[i] = np.where(_input1[j] > _input1[j].quantile(0.99), _input1[j].quantile(0.99), _input1[j])
    _input0[i] = np.where(_input0[j] > _input0[j].quantile(0.99), _input0[j].quantile(0.99), _input0[j])
(fig, axes) = plt.subplots(2, 3, figsize=(12, 12), constrained_layout=True)
room_plot = sns.distplot(_input1.RoomService_Capped, hist_kws=dict(edgecolor='black'), ax=axes[0, 0])
axes[0, 0].set_title('Room Service Capped Distribution', fontsize=15)
axes[0, 0].set_ylabel('Percentage', fontsize=10)
axes[0, 0].set_xlabel('Amount', fontsize=10)
food_plot = sns.distplot(_input1.FoodCourt_Capped, hist_kws=dict(edgecolor='black'), ax=axes[0, 1], color='red')
axes[0, 1].set_title('Food Court Capped Distribution', fontsize=15)
axes[0, 1].set_ylabel('Percentage', fontsize=10)
axes[0, 1].set_xlabel('Amount', fontsize=10)
shop_plot = sns.distplot(_input1.ShoppingMall_Capped, hist_kws=dict(edgecolor='black'), ax=axes[0, 2], color='green')
axes[0, 2].set_title('Shopping Mall Capped Distribution', fontsize=15)
axes[0, 2].set_ylabel('Percentage', fontsize=10)
axes[0, 2].set_xlabel('Amount', fontsize=10)
spa_plot = sns.distplot(_input1.Spa_Capped, hist_kws=dict(edgecolor='black'), ax=axes[1, 0], color='orange')
axes[1, 0].set_title('Spa Capped Distribution', fontsize=15)
axes[1, 0].set_ylabel('Percentage', fontsize=10)
axes[1, 0].set_xlabel('Amount', fontsize=10)
vrdeck_plot = sns.distplot(_input1.VRDeck_Capped, hist_kws=dict(edgecolor='black'), ax=axes[1, 1], color='purple')
axes[1, 1].set_title('VRDeck Capped Distribution', fontsize=15)
axes[1, 1].set_ylabel('Percentage', fontsize=10)
axes[1, 1].set_xlabel('Amount', fontsize=10)
fig.delaxes(axes[1, 2])
bin_list = ['RoomService_ind', 'FoodCourt_ind', 'ShoppingMall_ind', 'Spa_ind', 'VRDeck_ind']
var_list = ['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']
for (i, j) in zip(bin_list, var_list):
    _input1[i] = np.where(_input1[j] > 0, 1, 0)
    _input0[i] = np.where(_input0[j] > 0, 1, 0)
count_list = ['RoomService_ind', 'FoodCourt_ind', 'ShoppingMall_ind', 'Spa_ind', 'VRDeck_ind']
for i in count_list:
    print(_input1[i].value_counts(normalize=True))
    print()
log_list = ['RoomService_log', 'FoodCourt_log', 'ShoppingMall_log', 'Spa_log', 'VRDeck_log']
var_list = ['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']
for (i, j) in zip(log_list, var_list):
    _input1[i] = np.log(_input1[j] + 1)
    _input0[i] = np.log(_input0[j] + 1)
(fig, axes) = plt.subplots(2, 3, figsize=(12, 12), constrained_layout=True)
room_plot = sns.distplot(_input1.RoomService_log, hist_kws=dict(edgecolor='black'), ax=axes[0, 0])
axes[0, 0].set_title('Room Service Log-transformation', fontsize=15)
axes[0, 0].set_ylabel('Percentage', fontsize=10)
axes[0, 0].set_xlabel('Amount', fontsize=10)
food_plot = sns.distplot(_input1.FoodCourt_log, hist_kws=dict(edgecolor='black'), ax=axes[0, 1], color='red')
axes[0, 1].set_title('Food Court Log-transformation', fontsize=15)
axes[0, 1].set_ylabel('Percentage', fontsize=10)
axes[0, 1].set_xlabel('Amount', fontsize=10)
shop_plot = sns.distplot(_input1.ShoppingMall_log, hist_kws=dict(edgecolor='black'), ax=axes[0, 2], color='green')
axes[0, 2].set_title('Shopping Mall Log-transformation', fontsize=15)
axes[0, 2].set_ylabel('Percentage', fontsize=10)
axes[0, 2].set_xlabel('Amount', fontsize=10)
spa_plot = sns.distplot(_input1.Spa_log, hist_kws=dict(edgecolor='black'), ax=axes[1, 0], color='orange')
axes[1, 0].set_title('Spa Log-transformation', fontsize=15)
axes[1, 0].set_ylabel('Percentage', fontsize=10)
axes[1, 0].set_xlabel('Amount', fontsize=10)
vrdeck_plot = sns.distplot(_input1.VRDeck_log, hist_kws=dict(edgecolor='black'), ax=axes[1, 1], color='purple')
axes[1, 1].set_title('VRDeck Log-transformation', fontsize=15)
axes[1, 1].set_ylabel('Percentage', fontsize=10)
axes[1, 1].set_xlabel('Amount', fontsize=10)
fig.delaxes(axes[1, 2])

def int_plot_func(x):
    (fig, axes) = plt.subplots(2, 3, figsize=(12, 12), constrained_layout=True)
    room = interaction_plot(x=_input1[x], trace=_input1['RoomService_ind'], response=_input1['Transported'], ax=axes[0, 0])
    axes[0, 0].set_title('Interaction of RoomService', fontsize=12)
    food = interaction_plot(x=_input1[x], trace=_input1['FoodCourt_ind'], response=_input1['Transported'], ax=axes[0, 1])
    axes[0, 1].set_title('Interaction of FoodCourt', fontsize=12)
    shop = interaction_plot(x=_input1[x], trace=_input1['ShoppingMall_ind'], response=_input1['Transported'], ax=axes[0, 2])
    axes[0, 2].set_title('Interaction of ShoppingMall', fontsize=12)
    spa = interaction_plot(x=_input1[x], trace=_input1['Spa_ind'], response=_input1['Transported'], ax=axes[1, 0])
    axes[1, 0].set_title('Interaction of Spa', fontsize=12)
    vr = interaction_plot(x=_input1[x], trace=_input1['VRDeck_ind'], response=_input1['Transported'], ax=axes[1, 1])
    axes[1, 1].set_title('Interaction of VRDeck', fontsize=12)
    fig.delaxes(axes[1, 2])
    return fig
int_plot_func('HomePlanet')
int_plot_func('CabinDeck')
int_plot_func('CabinSide')
int_plot_func('Destination')