import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
_input1 = pd.read_csv('data/input/spaceship-titanic/train.csv')
_input0 = pd.read_csv('data/input/spaceship-titanic/test.csv')
print(f'Train Set: {_input1.shape}')
print(f'Test Set: {_input0.shape}')
_input1.head()
pd.DataFrame(_input1.isnull().sum(), columns=['missing_count']).assign(missing_pct=lambda x: x['missing_count'] / _input1.shape[0] * 100)
pd.DataFrame(_input0.isnull().sum(), columns=['missing_count']).assign(missing_pct=lambda x: x['missing_count'] / _input0.shape[0] * 100)
ax = _input1['Transported'].value_counts().plot(kind='bar')
ax.set_ylabel('No of Passengers')
ax.set_xlabel('Transported')
ax.set_title('Target Distribution')
(fig, ax) = plt.subplots(1, 2, figsize=(16, 5))
ax0 = _input1['HomePlanet'].value_counts().plot(kind='bar', ax=ax[0])
ax0.set_xlabel('Home Planet')
ax0.set_ylabel('No of Passengers')
ax0.set_title('No of Passengers vs Home Planet')
ax = _input1.groupby('HomePlanet').agg({'Transported': 'mean'}).plot(kind='bar', ax=ax[1])
ax.set_xlabel('Home Planet')
ax.set_ylabel('Proportion of Passengers')
ax.set_title('Proportion of Transported Passengers vs Home Planet')
(fig, ax) = plt.subplots(1, 2, figsize=(16, 5))
ax0 = _input1['CryoSleep'].value_counts().plot(kind='bar', ax=ax[0])
ax0.set_xlabel('Cryo Sleep')
ax0.set_ylabel('No of Passengers')
ax0.set_title('No of Passengers vs Cryo Sleep')
ax1 = _input1.groupby('CryoSleep').agg({'Transported': 'mean'}).plot(kind='bar', ax=ax[1])
ax1.set_xlabel('Cryo Sleep')
ax1.set_ylabel('Proportion of Passengers')
ax1.set_title('Proportion of Transported Passengers vs Cryo Sleep')
_input1[['Deck', 'Num', 'Side']] = _input1['Cabin'].str.split('/', expand=True).fillna('Missing')
(fig, ax) = plt.subplots(1, 2, figsize=(16, 5))
ax0 = _input1['Deck'].value_counts().sort_index().plot(kind='bar', ax=ax[0])
ax0.set_xlabel('Deck')
ax0.set_ylabel('No of Passengers')
ax0.set_title('No of Passengers vs Deck')
ax1 = _input1.groupby('Deck').agg({'Transported': 'mean'}).plot(kind='bar', ax=ax[1])
ax1.set_xlabel('Deck')
ax1.set_ylabel('Proportion of Passengers')
ax1.set_title('Proportion of Transported Passengers vs Deck')
(fig, ax) = plt.subplots(1, 2, figsize=(16, 5))
ax0 = _input1['Side'].value_counts().sort_index().plot(kind='bar', ax=ax[0])
ax0.set_xlabel('Side')
ax0.set_ylabel('No of Passengers')
ax0.set_title('No of Passengers vs Side')
ax1 = _input1.groupby('Side').agg({'Transported': 'mean'}).plot(kind='bar', ax=ax[1])
ax1.set_xlabel('Side')
ax1.set_ylabel('Proportion of Passengers')
ax1.set_title('Proportion of Transported Passengers vs Side')
(fig, ax) = plt.subplots(1, 2, figsize=(16, 5))
ax0 = _input1['Destination'].value_counts().sort_index().plot(kind='bar', ax=ax[0])
ax0.set_xlabel('Destination')
ax0.set_ylabel('No of Passengers')
ax0.set_title('No of Passengers vs Destination')
ax1 = _input1.groupby('Destination').agg({'Transported': 'mean'}).plot(kind='bar', ax=ax[1])
ax1.set_xlabel('Destination')
ax1.set_ylabel('Proportion of Passengers')
ax1.set_title('Proportion of Transported Passengers vs Destination')
(fig, ax) = plt.subplots(1, 2, figsize=(16, 5))
ax0 = _input1['VIP'].value_counts().sort_index().plot(kind='bar', ax=ax[0])
ax0.set_xlabel('VIP')
ax0.set_ylabel('No of Passengers')
ax0.set_title('No of Passengers vs VIP')
ax1 = _input1.groupby('VIP').agg({'Transported': 'mean'}).plot(kind='bar', ax=ax[1])
ax1.set_xlabel('VIP')
ax1.set_ylabel('Proportion of Passengers')
ax1.set_title('Proportion of Transported Passengers vs VIP')
ax = sns.histplot(_input1, x='Age', binwidth=1)
ax.set_ylabel('No of Passengers')
ax.set_xlabel('Age')
ax.set_title('Passengers Age Distribution')
_input1['Age'].describe()
agegroup_mapper = {0: '0-9', 1: '10-19', 2: '20-29', 3: '30-39', 4: '40-49', 5: '50-59', 6: '60-69', 7: '70-79', 8: '80-89'}
_input1['AgeGroup'] = _input1['Age'].apply(lambda x: np.floor(x / 10)).map(agegroup_mapper)
ax = pd.pivot_table(_input1, index='AgeGroup', columns='Transported', values='PassengerId', aggfunc='count').rename(columns={True: 'True', False: 'False'}).assign(PctTransported=lambda x: x['True'] / (x['True'] + x['False']) * 100).reset_index().plot(kind='bar', x='AgeGroup', y='PctTransported')
ax.set_ylabel('% of Passengers')
ax.set_xlabel('Age Group')
ax.set_title('% of Passengers Transported by Age Group')
fill_cols = ['RoomService', 'FoodCourt', 'ShoppingMall', 'Spa', 'VRDeck']
_input1[fill_cols] = _input1[fill_cols].fillna(0)
_input1['TotalSpend'] = _input1['RoomService'] + _input1['FoodCourt'] + _input1['ShoppingMall'] + _input1['Spa'] + _input1['VRDeck']
ax = sns.histplot(_input1, x='TotalSpend', hue='Transported', binwidth=1000)
ax.set_ylabel('No of Passengers')
ax.set_xlabel('Spending')
ax.set_title('Passengers Total Spending Distribution')
ax.set_xlim(0, 10000)
_input1.groupby('Transported')['TotalSpend'].describe()
_input1[['PassengerGroup', 'PassengerNo']] = _input1['PassengerId'].str.split('_', expand=True)
print(f'Number of Groups: {_input1.PassengerGroup.nunique()}')
ax = _input1.PassengerGroup.value_counts().value_counts().plot(kind='bar')
ax.set_ylabel('No of Groups')
ax.set_xlabel('No of Passengers')
ax.set_title('Passenger Distribution Across Groups')
_input1.groupby('PassengerGroup', as_index=False).agg({'PassengerNo': 'count', 'Transported': lambda x: sum(x == True)}).assign(AllTransported=lambda x: x['Transported'] == x['PassengerNo']).groupby(['PassengerNo', 'AllTransported'], as_index=False).agg({'PassengerGroup': 'count'}).pivot(index='PassengerNo', columns='AllTransported', values='PassengerGroup').fillna(0).rename(columns={False: 'False', True: 'True'}).assign(PctAllTransported=lambda x: x['True'] / (x['True'] + x['False']))
_input1['GroupSize'] = _input1.groupby('PassengerGroup')['PassengerId'].transform('nunique')
ax = _input1.groupby('GroupSize', as_index=False).agg({'Transported': 'mean'}).plot(kind='bar', x='GroupSize', y='Transported')
ax.set_ylabel('Probability of Transported')
ax.set_xlabel('Group Size')
ax.set_title('Probability of Transported by Group Size')
_input1.dropna(subset=['HomePlanet']).groupby('PassengerGroup', as_index=False).agg({'PassengerNo': 'count', 'HomePlanet': 'nunique'}).groupby('HomePlanet', as_index=False).agg({'PassengerNo': 'count'}).rename(columns={'HomePlanet': 'HomePlanetCount', 'PassengerNo': 'PassengerGroup'})
_input1.dropna(subset=['Destination']).groupby('PassengerGroup', as_index=False).agg({'PassengerNo': 'count', 'Destination': 'nunique'}).groupby('Destination', as_index=False).agg({'PassengerNo': 'count'}).rename(columns={'Destination': 'DestinationCount', 'PassengerNo': 'PassengerGroup'})
_input1.groupby('PassengerGroup', as_index=False).agg({'PassengerNo': 'count', 'CryoSleep': lambda x: sum(x == True)}).assign(AllCryoSleep=lambda x: x['CryoSleep'] == x['PassengerNo']).groupby(['PassengerNo', 'AllCryoSleep'], as_index=False).agg({'PassengerGroup': 'count'}).pivot(index='PassengerNo', columns='AllCryoSleep', values='PassengerGroup').fillna(0).rename(columns={False: 'False', True: 'True'}).assign(PctGroupCryoSleep=lambda x: x['True'] / (x['True'] + x['False']))
_input1.groupby('PassengerGroup', as_index=False).agg({'PassengerNo': 'count', 'VIP': lambda x: sum(x == True)}).assign(VIP=lambda x: x['VIP'] == x['PassengerNo']).groupby(['PassengerNo', 'VIP'], as_index=False).agg({'PassengerGroup': 'count'}).pivot(index='PassengerNo', columns='VIP', values='PassengerGroup').fillna(0).rename(columns={False: 'False', True: 'True'}).assign(VIP=lambda x: x['True'] / (x['True'] + x['False']))