import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
for (dirname, _, filenames) in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
_input1 = pd.read_csv('data/input/spaceship-titanic/train.csv')
_input0 = pd.read_csv('data/input/spaceship-titanic/test.csv')
df = pd.DataFrame()
_input1.info()
_input1.head()
_input1['Transported'] = _input1['Transported'].apply(lambda x: 0 if x == False else 1)
_input1.corr()['Transported'].sort_values(ascending=False)
_input1['id_group'] = _input1['PassengerId'].apply(lambda x: x[:4])
_input1['no_group'] = _input1['PassengerId'].apply(lambda x: x[-2:])
_input1['id_group'] = _input1['id_group'].astype(str)
_input1['no_group'] = _input1['no_group'].astype(str)
_input0['id_group'] = _input0['PassengerId'].apply(lambda x: x[:4])
_input0['no_group'] = _input0['PassengerId'].apply(lambda x: x[-2:])
_input0['id_group'] = _input0['id_group'].astype(str)
_input0['no_group'] = _input0['no_group'].astype(str)
_input1 = _input1.drop('PassengerId', axis=1)
_input0 = _input0.drop('PassengerId', axis=1)
_input1.head()
_input0.head()
_input1['HomePlanet'].unique()
_input1['HomePlanet'].isnull().sum()
_input1['HomePlanet'].value_counts().plot(kind='bar')
_input1['HomePlanet'] = _input1['HomePlanet'].fillna(method='ffill')
_input0['HomePlanet'] = _input0['HomePlanet'].fillna(method='ffill')
_input1.head()
_input1['HomePlanet'].isnull().sum()
_input1 = pd.get_dummies(data=_input1, columns=['HomePlanet'])
_input0 = pd.get_dummies(data=_input0, columns=['HomePlanet'])
_input0.head()
_input1['CryoSleep'].value_counts().plot(kind='bar')
_input1['CryoSleep'] = _input1['CryoSleep'].fillna(method='ffill')
_input0['CryoSleep'] = _input0['CryoSleep'].fillna(method='ffill')
_input1 = pd.get_dummies(data=_input1, columns=['CryoSleep'])
_input0 = pd.get_dummies(data=_input0, columns=['CryoSleep'])
_input0.head()
_input1['Cabin']
_input1['Cabin'].describe()
_input1['Cabin'].unique()
_input1['Cabin'].isnull().sum()
_input1['Cabin'] = _input1['Cabin'].fillna(method='bfill')
_input0['Cabin'] = _input0['Cabin'].fillna(method='bfill')
_input1['Cabin'].isnull().sum()
_input1['cabin_deck'] = _input1['Cabin'].apply(lambda x: str(x).split('/')[0])
_input1['cabin_number'] = _input1['Cabin'].apply(lambda x: str(x).split('/')[1])
_input1['cabin_side'] = _input1['Cabin'].apply(lambda x: str(x).split('/')[2])
_input0['cabin_deck'] = _input0['Cabin'].apply(lambda x: str(x).split('/')[0])
_input0['cabin_number'] = _input0['Cabin'].apply(lambda x: str(x).split('/')[1])
_input0['cabin_side'] = _input0['Cabin'].apply(lambda x: str(x).split('/')[2])
_input0.head()
_input1['cabin_side'] = _input1['cabin_side'].apply(lambda x: 1 if x == 'P' else 0)
_input0['cabin_side'] = _input0['cabin_side'].apply(lambda x: 1 if x == 'P' else 0)
_input1.head()
_input1 = pd.get_dummies(data=_input1, columns=['cabin_deck'])
_input0 = pd.get_dummies(data=_input0, columns=['cabin_deck'])
_input1 = _input1.drop('Cabin', axis=1, inplace=False)
_input1 = _input1.drop('CryoSleep_False', axis=1, inplace=False)
_input0 = _input0.drop('Cabin', axis=1, inplace=False)
_input0 = _input0.drop('CryoSleep_False', axis=1, inplace=False)
_input1['Destination'].unique()
_input1['Destination'].isnull().sum()
_input1['Destination'] = _input1['Destination'].fillna(method='ffill')
_input0['Destination'] = _input0['Destination'].fillna(method='ffill')
_input1['Destination'].isnull().sum()
_input1 = pd.get_dummies(data=_input1, columns=['Destination'])
_input0 = pd.get_dummies(data=_input0, columns=['Destination'])
_input0
_input1.corr()['Transported'].sort_values(ascending=False)[1:]
_input1['Age'].isnull().sum()
_input1['Age'].describe()
_input1['Age'] = _input1['Age'].fillna(_input1['Age'].mean())
_input0['Age'] = _input0['Age'].fillna(_input0['Age'].mean())
_input0['Age'].isnull().sum()
_input1['VIP']
_input1['VIP'] = _input1['VIP'].fillna(method='ffill')
_input0['VIP'] = _input0['VIP'].fillna(method='ffill')
_input1['VIP'] = _input1['VIP'].apply(lambda x: 1 if x == True else 0)
_input0['VIP'] = _input0['VIP'].apply(lambda x: 1 if x == True else 0)
_input1.corr()['Transported'].sort_values(ascending=False).plot(kind='bar')
_input1['Spa'] = _input1['Spa'].fillna(method='ffill')
_input1['VRDeck'] = _input1['VRDeck'].fillna(method='ffill')
_input1['ShoppingMall'] = _input1['ShoppingMall'].fillna(method='ffill')
_input1['FoodCourt'] = _input1['FoodCourt'].fillna(method='ffill')
_input1['RoomService'] = _input1['RoomService'].fillna(method='ffill')
_input0['Spa'] = _input0['Spa'].fillna(method='ffill')
_input0['VRDeck'] = _input0['VRDeck'].fillna(method='ffill')
_input0['ShoppingMall'] = _input0['ShoppingMall'].fillna(method='ffill')
_input0['FoodCourt'] = _input0['FoodCourt'].fillna(method='ffill')
_input0['RoomService'] = _input0['RoomService'].fillna(method='ffill')
_input1.head()
_input1 = _input1.drop('Name', axis=1)
_input0 = _input0.drop('Name', axis=1)
X_train = _input1.drop('Transported', axis=1)
y_train = _input1['Transported']
X_train.head()
X_test = _input0
X_train.columns
X_test.columns
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()