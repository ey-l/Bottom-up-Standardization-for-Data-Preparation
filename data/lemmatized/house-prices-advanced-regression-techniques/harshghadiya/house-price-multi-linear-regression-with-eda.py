import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')
_input1 = pd.read_csv('_data/input/house-prices-advanced-regression-techniques/train.csv')
_input1
_input0 = pd.read_csv('_data/input/house-prices-advanced-regression-techniques/test.csv')
_input0
_input1.columns
_input1.info()
_input1.shape
_input0.shape
_input1.isnull().sum()
_input1 = _input1.drop(['Id', 'Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature', 'MasVnrType'], axis=1, inplace=False)
_input0 = _input0.drop(['Id', 'Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature', 'MasVnrType'], axis=1, inplace=False)
_input1.shape
_input0.shape
_input1.duplicated().sum()
_input0.duplicated().sum()
_input1['LotFrontage'] = _input1['LotFrontage'].fillna(method='bfill', inplace=False)
_input1['MasVnrArea'] = _input1['MasVnrArea'].fillna(0, inplace=False)
_input1['BsmtQual'] = _input1['BsmtQual'].fillna(method='bfill', inplace=False)
_input1['BsmtCond'] = _input1['BsmtCond'].fillna(method='bfill', inplace=False)
_input1['BsmtExposure'] = _input1['BsmtExposure'].fillna('No', inplace=False)
_input1['BsmtFinType1'] = _input1['BsmtFinType1'].fillna(method='bfill', inplace=False)
_input1['BsmtFinType2'] = _input1['BsmtFinType2'].fillna(method='bfill', inplace=False)
_input1['Electrical'] = _input1['Electrical'].fillna(method='bfill', inplace=False)
_input1['GarageType'] = _input1['GarageType'].fillna(method='bfill', inplace=False)
_input1['GarageYrBlt'] = _input1['GarageYrBlt'].fillna(method='bfill', inplace=False)
_input1['GarageFinish'] = _input1['GarageFinish'].fillna(method='bfill', inplace=False)
_input1['GarageQual'] = _input1['GarageQual'].fillna(method='bfill', inplace=False)
_input1['GarageCond'] = _input1['GarageCond'].fillna(method='bfill', inplace=False)
_input0['LotFrontage'] = _input0['LotFrontage'].fillna(method='bfill', inplace=False)
_input0['MasVnrArea'] = _input0['MasVnrArea'].fillna(0, inplace=False)
_input0['BsmtQual'] = _input0['BsmtQual'].fillna(method='bfill', inplace=False)
_input0['BsmtCond'] = _input0['BsmtCond'].fillna(method='bfill', inplace=False)
_input0['BsmtExposure'] = _input0['BsmtExposure'].fillna('No', inplace=False)
_input0['BsmtFinType1'] = _input0['BsmtFinType1'].fillna(method='bfill', inplace=False)
_input0['BsmtFinType2'] = _input0['BsmtFinType2'].fillna(method='bfill', inplace=False)
_input0['Electrical'] = _input0['Electrical'].fillna(method='bfill', inplace=False)
_input0['Electrical'] = _input0['Electrical'].fillna(method='bfill', inplace=False)
_input0['BsmtFinSF1'] = _input0['BsmtFinSF1'].fillna(method='bfill', inplace=False)
_input0['BsmtFinSF2'] = _input0['BsmtFinSF2'].fillna(method='bfill', inplace=False)
_input0['BsmtUnfSF'] = _input0['BsmtUnfSF'].fillna(method='bfill', inplace=False)
_input0['TotalBsmtSF'] = _input0['TotalBsmtSF'].fillna(method='bfill', inplace=False)
_input0['BsmtFullBath'] = _input0['BsmtFullBath'].fillna(method='bfill', inplace=False)
_input0['BsmtHalfBath'] = _input0['BsmtHalfBath'].fillna(method='bfill', inplace=False)
_input0['GarageYrBlt'] = _input0['GarageYrBlt'].fillna(method='bfill', inplace=False)
_input0['GarageCars'] = _input0['GarageCars'].fillna(method='bfill', inplace=False)
_input0['GarageArea'] = _input0['GarageArea'].fillna(method='bfill', inplace=False)
_input1.info()
_input0.info()
_input1.shape
_input0.shape
_input1.head()
from sklearn import preprocessing
print('MSZoning: ', len(_input1['MSZoning'].unique()))
print('Street: ', len(_input1['Street'].unique()))
print('LotShape: ', len(_input1['LotShape'].unique()))
print('LandContour: ', len(_input1['LandContour'].unique()))
print('Utilities: ', len(_input1['Utilities'].unique()))
print('LotConfig: ', len(_input1['LotConfig'].unique()))
print('LandSlope: ', len(_input1['LandSlope'].unique()))
print('Neighborhood: ', len(_input1['Neighborhood'].unique()))
print('Condition1: ', len(_input1['Condition1'].unique()))
print('Condition2: ', len(_input1['Condition2'].unique()))
print('BldgType: ', len(_input1['BldgType'].unique()))
print('HouseStyle: ', len(_input1['HouseStyle'].unique()))
print('RoofStyle: ', len(_input1['RoofStyle'].unique()))
print('RoofMatl: ', len(_input1['RoofMatl'].unique()))
print('Exterior1st: ', len(_input1['Exterior1st'].unique()))
print('Exterior2nd: ', len(_input1['Exterior2nd'].unique()))
print('ExterQual: ', len(_input1['ExterQual'].unique()))
print('ExterCond: ', len(_input1['ExterCond'].unique()))
print('Foundation: ', len(_input1['Foundation'].unique()))
print('BsmtQual: ', len(_input1['BsmtQual'].unique()))
print('BsmtCond: ', len(_input1['BsmtCond'].unique()))
print('BsmtExposure: ', len(_input1['BsmtExposure'].unique()))
print('BsmtFinType1: ', len(_input1['BsmtFinType1'].unique()))
print('BsmtFinType2: ', len(_input1['BsmtFinType2'].unique()))
print('Heating: ', len(_input1['Heating'].unique()))
print('HeatingQC: ', len(_input1['HeatingQC'].unique()))
print('CentralAir: ', len(_input1['CentralAir'].unique()))
print('Electrical: ', len(_input1['Electrical'].unique()))
print('KitchenQual: ', len(_input1['KitchenQual'].unique()))
print('Functional: ', len(_input1['Functional'].unique()))
print('GarageType: ', len(_input1['GarageType'].unique()))
print('GarageFinish: ', len(_input1['GarageFinish'].unique()))
print('GarageQual: ', len(_input1['GarageQual'].unique()))
print('GarageCond: ', len(_input1['GarageCond'].unique()))
print('PavedDrive: ', len(_input1['PavedDrive'].unique()))
print('SaleType: ', len(_input1['SaleType'].unique()))
print('SaleCondition: ', len(_input1['SaleCondition'].unique()))
label_encoder = preprocessing.LabelEncoder()
_input1['MSZoning'] = label_encoder.fit_transform(_input1['MSZoning'])
_input1['Street'] = label_encoder.fit_transform(_input1['Street'])
_input1['LotShape'] = label_encoder.fit_transform(_input1['LotShape'])
_input1['LandContour'] = label_encoder.fit_transform(_input1['LandContour'])
_input1['Utilities'] = label_encoder.fit_transform(_input1['Utilities'])
_input1['LotConfig'] = label_encoder.fit_transform(_input1['LotConfig'])
_input1['LandSlope'] = label_encoder.fit_transform(_input1['LandSlope'])
_input1['Neighborhood'] = label_encoder.fit_transform(_input1['Neighborhood'])
_input1['Condition1'] = label_encoder.fit_transform(_input1['Condition1'])
_input1['Condition2'] = label_encoder.fit_transform(_input1['Condition2'])
_input1['BldgType'] = label_encoder.fit_transform(_input1['BldgType'])
_input1['HouseStyle'] = label_encoder.fit_transform(_input1['HouseStyle'])
_input1['RoofStyle'] = label_encoder.fit_transform(_input1['RoofStyle'])
_input1['RoofMatl'] = label_encoder.fit_transform(_input1['RoofMatl'])
_input1['Exterior1st'] = label_encoder.fit_transform(_input1['Exterior1st'])
_input1['Exterior2nd'] = label_encoder.fit_transform(_input1['Exterior2nd'])
_input1['ExterQual'] = label_encoder.fit_transform(_input1['ExterQual'])
_input1['ExterCond'] = label_encoder.fit_transform(_input1['ExterCond'])
_input1['Foundation'] = label_encoder.fit_transform(_input1['Foundation'])
_input1['BsmtQual'] = label_encoder.fit_transform(_input1['BsmtQual'])
_input1['BsmtCond'] = label_encoder.fit_transform(_input1['BsmtCond'])
_input1['BsmtExposure'] = label_encoder.fit_transform(_input1['BsmtExposure'])
_input1['BsmtFinType1'] = label_encoder.fit_transform(_input1['BsmtFinType1'])
_input1['BsmtFinType2'] = label_encoder.fit_transform(_input1['BsmtFinType2'])
_input1['Heating'] = label_encoder.fit_transform(_input1['Heating'])
_input1['HeatingQC'] = label_encoder.fit_transform(_input1['HeatingQC'])
_input1['CentralAir'] = label_encoder.fit_transform(_input1['CentralAir'])
_input1['Electrical'] = label_encoder.fit_transform(_input1['Electrical'])
_input1['KitchenQual'] = label_encoder.fit_transform(_input1['KitchenQual'])
_input1['Functional'] = label_encoder.fit_transform(_input1['Functional'])
_input1['GarageType'] = label_encoder.fit_transform(_input1['GarageType'])
_input1['GarageFinish'] = label_encoder.fit_transform(_input1['GarageFinish'])
_input1['GarageQual'] = label_encoder.fit_transform(_input1['GarageQual'])
_input1['GarageCond'] = label_encoder.fit_transform(_input1['GarageCond'])
_input1['PavedDrive'] = label_encoder.fit_transform(_input1['PavedDrive'])
_input1['SaleType'] = label_encoder.fit_transform(_input1['SaleType'])
_input1['SaleCondition'] = label_encoder.fit_transform(_input1['SaleCondition'])
_input1.head()
_input1.info()
_input0['MSZoning'] = label_encoder.fit_transform(_input0['MSZoning'])
_input0['Street'] = label_encoder.fit_transform(_input0['Street'])
_input0['LotShape'] = label_encoder.fit_transform(_input0['LotShape'])
_input0['LandContour'] = label_encoder.fit_transform(_input0['LandContour'])
_input0['Utilities'] = label_encoder.fit_transform(_input0['Utilities'])
_input0['LotConfig'] = label_encoder.fit_transform(_input0['LotConfig'])
_input0['LandSlope'] = label_encoder.fit_transform(_input0['LandSlope'])
_input0['Neighborhood'] = label_encoder.fit_transform(_input0['Neighborhood'])
_input0['Condition1'] = label_encoder.fit_transform(_input0['Condition1'])
_input0['Condition2'] = label_encoder.fit_transform(_input0['Condition2'])
_input0['BldgType'] = label_encoder.fit_transform(_input0['BldgType'])
_input0['HouseStyle'] = label_encoder.fit_transform(_input0['HouseStyle'])
_input0['RoofStyle'] = label_encoder.fit_transform(_input0['RoofStyle'])
_input0['RoofMatl'] = label_encoder.fit_transform(_input0['RoofMatl'])
_input0['Exterior1st'] = label_encoder.fit_transform(_input0['Exterior1st'])
_input0['Exterior2nd'] = label_encoder.fit_transform(_input0['Exterior2nd'])
_input0['ExterQual'] = label_encoder.fit_transform(_input0['ExterQual'])
_input0['ExterCond'] = label_encoder.fit_transform(_input0['ExterCond'])
_input0['Foundation'] = label_encoder.fit_transform(_input0['Foundation'])
_input0['BsmtQual'] = label_encoder.fit_transform(_input0['BsmtQual'])
_input0['BsmtCond'] = label_encoder.fit_transform(_input0['BsmtCond'])
_input0['BsmtExposure'] = label_encoder.fit_transform(_input0['BsmtExposure'])
_input0['BsmtFinType1'] = label_encoder.fit_transform(_input0['BsmtFinType1'])
_input0['BsmtFinType2'] = label_encoder.fit_transform(_input0['BsmtFinType2'])
_input0['Heating'] = label_encoder.fit_transform(_input0['Heating'])
_input0['HeatingQC'] = label_encoder.fit_transform(_input0['HeatingQC'])
_input0['CentralAir'] = label_encoder.fit_transform(_input0['CentralAir'])
_input0['Electrical'] = label_encoder.fit_transform(_input0['Electrical'])
_input0['KitchenQual'] = label_encoder.fit_transform(_input0['KitchenQual'])
_input0['Functional'] = label_encoder.fit_transform(_input0['Functional'])
_input0['GarageType'] = label_encoder.fit_transform(_input0['GarageType'])
_input0['GarageFinish'] = label_encoder.fit_transform(_input0['GarageFinish'])
_input0['GarageQual'] = label_encoder.fit_transform(_input0['GarageQual'])
_input0['GarageCond'] = label_encoder.fit_transform(_input0['GarageCond'])
_input0['PavedDrive'] = label_encoder.fit_transform(_input0['PavedDrive'])
_input0['SaleType'] = label_encoder.fit_transform(_input0['SaleType'])
_input0['SaleCondition'] = label_encoder.fit_transform(_input0['SaleCondition'])
_input0.head()
X = _input1.drop('SalePrice', axis=1)
y = _input1['SalePrice']
plt.figure(figsize=(22, 18))
ax = sns.heatmap(X.corr(), annot=True)

def correlation(dataset, threshold):
    col_corr = set()
    corr_matrix = dataset.corr()
    for i in range(len(corr_matrix.columns)):
        for j in range(i):
            if abs(corr_matrix.iloc[i, j]) > threshold:
                colname = corr_matrix.columns[i]
                col_corr.add(colname)
    return col_corr
corr_features = correlation(X, 0.7)
len(set(corr_features))
corr_features
X_corr = X.drop(corr_features, axis=1)
X_corr
test_data = _input0.drop(corr_features, axis=1)
test_data.head()
(x_train, x_test, y_train, y_test) = train_test_split(X_corr, y, test_size=0.3)
x_train
print('x_train: ', x_train.shape)
print('x_test: ', x_test.shape)
print('y_train: ', y_train.shape)
print('y_test: ', y_test.shape)
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor(criterion='mae', n_estimators=38, random_state=20)