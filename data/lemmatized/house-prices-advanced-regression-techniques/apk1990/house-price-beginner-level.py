import numpy as np
import pandas as pd
import os
for (dirname, _, filenames) in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
color = sns.color_palette()
import warnings
warnings.filterwarnings('ignore')
_input1 = pd.read_csv('_data/input/house-prices-advanced-regression-techniques/train.csv')
_input0 = pd.read_csv('_data/input/house-prices-advanced-regression-techniques/test.csv')
_input1.head()
_input0.head()
_input1.shape
_input0.shape
_input1.info()
_input1.describe()
train_cat = _input1.select_dtypes(include=['object'])
test_cat = _input0.select_dtypes(include=['object'])
train_cat.info()
train_numeric = _input1.select_dtypes(include=['float64', 'int64'])
test_numeric = _input0.select_dtypes(include=['float64', 'int64'])
train_numeric.info()
missing_cat_train = pd.DataFrame(train_cat.isna().sum().sort_values(ascending=False), columns=['missing_cat_total'])
missing_cat_test = pd.DataFrame(test_cat.isna().sum().sort_values(ascending=False), columns=['missing_cat_total'])
print(missing_cat_train)
print('-' * 40)
print(missing_cat_test)
missing_numeric_train = pd.DataFrame(train_numeric.isna().sum().sort_values(ascending=False), columns=['missing_num_total'])
missing_numeric_test = pd.DataFrame(test_numeric.isna().sum().sort_values(ascending=False), columns=['missing_num_total'])
print(missing_numeric_train)
print('-' * 40)
print(missing_numeric_test)
missing_cat_percent = missing_cat_train['missing_cat_total'] / 1460 * 100
print(missing_cat_percent)
missing_num_percent = missing_numeric_train['missing_num_total'] / 1460 * 100
print(missing_num_percent)
_input1 = _input1.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu'], axis=1)
_input1.head()
_input0 = _input0.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu'], axis=1)
print(_input1.shape)
print(_input0.shape)
missing_data = _input1[['GarageType', 'GarageCond', 'GarageQual', 'GarageFinish', 'BsmtFinType2', 'BsmtExposure', 'BsmtFinType1', 'BsmtQual', 'BsmtCond', 'MasVnrType', 'Electrical', 'LotFrontage', 'GarageYrBlt', 'MasVnrArea']]
missing_data.head()
for col in ('GarageType', 'GarageCond', 'GarageQual', 'GarageFinish', 'BsmtFinType2', 'BsmtFinType1', 'BsmtExposure', 'BsmtQual', 'BsmtCond', 'MasVnrType', 'Electrical', 'MasVnrArea'):
    _input1[col] = _input1[col].fillna('None')
_input1['LotFrontage'] = _input1['LotFrontage'].fillna(_input1['LotFrontage'].mean())
_input1['GarageYrBlt'] = _input1['GarageYrBlt'].fillna(_input1['GarageYrBlt'].mean())
for col in ('GarageType', 'GarageCond', 'GarageQual', 'GarageFinish', 'BsmtFinType2', 'BsmtFinType1', 'BsmtExposure', 'BsmtQual', 'BsmtCond', 'MasVnrType', 'Electrical', 'MasVnrArea'):
    _input0[col] = _input0[col].fillna('None')
_input0['LotFrontage'] = _input0['LotFrontage'].fillna(_input0['LotFrontage'].mean())
_input0['GarageYrBlt'] = _input0['GarageYrBlt'].fillna(_input0['GarageYrBlt'].mean())
print(_input1.isna().sum().sort_values(ascending=False))
print('*' * 40)
print(_input0.isna().sum().sort_values(ascending=False))
test_missing_left = pd.DataFrame(_input0.isna().sum().sort_values(ascending=False), columns=['test_missing'])
test_missing_left = test_missing_left[test_missing_left['test_missing'] > 0]
test_missing_left
for col in ['MSZoning', 'BsmtHalfBath', 'BsmtFullBath', 'Functional', 'Utilities', 'Exterior1st', 'KitchenQual', 'GarageCars', 'GarageArea', 'BsmtFinSF1', 'TotalBsmtSF', 'BsmtFinSF2', 'BsmtUnfSF', 'SaleType', 'Exterior2nd']:
    _input0[col] = _input0[col].fillna('None')
print(_input0.isna().sum().sort_values(ascending=False))
plt.figure(figsize=(20, 1))
sns.heatmap(_input1.drop('Id', axis=1).corr().sort_values(by=['SalePrice'], ascending=False).head(1), cmap='coolwarm', annot=True, annot_kws={'size': 8}, fmt='.2f')
plt.title('Correlation of Numerical Features with the Target', weight='bold', fontsize=18)
plt.xticks(weight='bold')
plt.yticks(weight='bold', color='dodgerblue', rotation=0)
plt.figure(figsize=(14, 12))
sns.set(font_scale=1.5)
sns.heatmap(_input1.drop('Id', axis=1).corr(), mask=np.triu(np.ones_like(_input1.drop('Id', axis=1).corr(), dtype=np.bool)), fmt='.2f', cmap='coolwarm', annot=True, cbar_kws={'shrink': 0.8}, annot_kws={'size': 8})
plt.figure(figsize=(16, 10))
sns.set_palette('pastel')
plt.subplot(2, 3, 1)
sns.regplot(x='GrLivArea', y='SalePrice', data=_input1)
plt.subplot(2, 3, 2)
sns.boxplot(x='OverallQual', y='SalePrice', data=_input1)
plt.subplot(2, 3, 3)
sns.regplot(x='TotalBsmtSF', y='SalePrice', data=_input1)
plt.subplot(2, 3, 4)
sns.regplot(x='1stFlrSF', y='SalePrice', data=_input1)
plt.subplot(2, 3, 5)
sns.boxplot(x='GarageCars', y='SalePrice', data=_input1)
plt.subplot(2, 3, 6)
sns.regplot(x='GarageArea', y='SalePrice', data=_input1)
plt.subplots_adjust(wspace=0.5)
traincat = _input1.select_dtypes(include=['object'])
traincat.columns
plt.figure(figsize=(20, 35))
sns.set_palette('pastel')
sns.set_style('darkgrid')
plt.subplot(8, 5, 1)
sns.violinplot(x='MSZoning', y='SalePrice', data=_input1)
plt.subplot(8, 5, 2)
sns.violinplot(x='Street', y='SalePrice', data=_input1)
plt.subplot(8, 5, 3)
sns.violinplot(x='LotShape', y='SalePrice', data=_input1)
plt.subplot(8, 5, 4)
sns.violinplot(x='LandContour', y='SalePrice', data=_input1)
plt.subplot(8, 5, 5)
sns.violinplot(x='Utilities', y='SalePrice', data=_input1)
plt.subplot(8, 5, 6)
sns.violinplot(x='LotConfig', y='SalePrice', data=_input1)
plt.subplot(8, 5, 7)
sns.violinplot(x='LandSlope', y='SalePrice', data=_input1)
plt.subplot(8, 5, 8)
sns.violinplot(x='Neighborhood', y='SalePrice', data=_input1)
plt.subplot(8, 5, 9)
sns.violinplot(x='Condition1', y='SalePrice', data=_input1)
plt.subplot(8, 5, 10)
sns.violinplot(x='Condition2', y='SalePrice', data=_input1)
plt.subplot(8, 5, 11)
sns.violinplot(x='BldgType', y='SalePrice', data=_input1)
plt.subplot(8, 5, 12)
sns.violinplot(x='HouseStyle', y='SalePrice', data=_input1)
plt.subplot(8, 5, 13)
sns.violinplot(x='RoofStyle', y='SalePrice', data=_input1)
plt.subplot(8, 5, 14)
sns.violinplot(x='RoofMatl', y='SalePrice', data=_input1)
plt.subplot(8, 5, 15)
sns.violinplot(x='Exterior1st', y='SalePrice', data=_input1)
plt.subplot(8, 5, 16)
sns.violinplot(x='Exterior2nd', y='SalePrice', data=_input1)
plt.subplot(8, 5, 17)
sns.violinplot(x='MasVnrType', y='SalePrice', data=_input1)
plt.subplot(8, 5, 18)
sns.violinplot(x='MasVnrArea', y='SalePrice', data=_input1)
plt.subplot(8, 5, 19)
sns.violinplot(x='ExterQual', y='SalePrice', data=_input1)
plt.subplot(8, 5, 20)
sns.violinplot(x='ExterCond', y='SalePrice', data=_input1)
plt.subplot(8, 5, 21)
sns.violinplot(x='Foundation', y='SalePrice', data=_input1)
plt.subplot(8, 5, 22)
sns.violinplot(x='BsmtQual', y='SalePrice', data=_input1)
plt.subplot(8, 5, 23)
sns.violinplot(x='BsmtCond', y='SalePrice', data=_input1)
plt.subplot(8, 5, 24)
sns.violinplot(x='BsmtExposure', y='SalePrice', data=_input1)
plt.subplot(8, 5, 25)
sns.violinplot(x='BsmtFinType1', y='SalePrice', data=_input1)
plt.subplot(8, 5, 26)
sns.violinplot(x='BsmtFinType2', y='SalePrice', data=_input1)
plt.subplot(8, 5, 27)
sns.violinplot(x='Heating', y='SalePrice', data=_input1)
plt.subplot(8, 5, 28)
sns.violinplot(x='HeatingQC', y='SalePrice', data=_input1)
plt.subplot(8, 5, 29)
sns.violinplot(x='CentralAir', y='SalePrice', data=_input1)
plt.subplot(8, 5, 30)
sns.violinplot(x='Electrical', y='SalePrice', data=_input1)
plt.subplot(8, 5, 31)
sns.violinplot(x='KitchenQual', y='SalePrice', data=_input1)
plt.subplot(8, 5, 32)
sns.violinplot(x='Functional', y='SalePrice', data=_input1)
plt.subplot(8, 5, 33)
sns.violinplot(x='GarageType', y='SalePrice', data=_input1)
plt.subplot(8, 5, 34)
sns.violinplot(x='GarageFinish', y='SalePrice', data=_input1)
plt.subplot(8, 5, 35)
sns.violinplot(x='GarageQual', y='SalePrice', data=_input1)
plt.subplot(8, 5, 35)
sns.violinplot(x='GarageCond', y='SalePrice', data=_input1)
plt.subplot(8, 5, 36)
sns.violinplot(x='PavedDrive', y='SalePrice', data=_input1)
plt.subplot(8, 5, 37)
sns.violinplot(x='SaleType', y='SalePrice', data=_input1)
plt.subplot(8, 5, 38)
sns.violinplot(x='SaleCondition', y='SalePrice', data=_input1)
plt.subplots_adjust(wspace=0.5, hspace=0.8)
features = ['OverallQual', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', '1stFlrSF', 'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'MSZoning', 'Neighborhood', 'Condition1', 'Condition2', 'RoofMatl', 'ExterQual', 'BsmtQual', 'CentralAir', 'KitchenQual', 'SaleType', 'MasVnrType', 'SaleCondition', 'HouseStyle']
traintest = pd.concat([_input1, _input0], axis=0, sort=False)
traintest.head()
traintest.tail()
traintest.shape
train_test = pd.get_dummies(traintest[features])
train_test.head()
X_train = train_test[0:1460]
X_test = train_test[1460:2919]
y_train = _input1[['SalePrice']]
print('Train', X_train.shape)
print('Test', X_test.shape)
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
from sklearn.impute import SimpleImputer
my_imputer = SimpleImputer()
X_train = my_imputer.fit_transform(X_train)
X_test = my_imputer.fit_transform(X_test)