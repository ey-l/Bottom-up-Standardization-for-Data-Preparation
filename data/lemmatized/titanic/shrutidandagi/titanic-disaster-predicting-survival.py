import pandas as pd
import seaborn as sns
import numpy as np
from matplotlib import pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.ensemble import RandomForestClassifier
sns.set(style='darkgrid')
_input1 = pd.read_csv('data/input/titanic/train.csv')
_input1.head()
_input0 = pd.read_csv('data/input/titanic/test.csv')
_input0.head()
print('Train data: ', _input1.shape)
print('Test data: ', _input0.shape)
titanic = pd.concat([_input1, _input0], sort=False).reset_index(drop=True)
titanic.shape
_input1.describe()
_input0.describe()
print('Train Data')
print('-' * 50)
_input1.info()
print('-' * 50)
print('*' * 75)
print('Test Data')
print('-' * 50)
_input0.info()
print('Missing values in Train Data')
print('-' * 50)
print(_input1.isnull().sum())
print('-' * 50)
print('*' * 75)
print('Missing Percentage in Train Data ')
print('-' * 50)
print(round(100 * (_input1.isnull().sum() / len(_input1.index)), 2))
print('Missing values in Test Data')
print('-' * 50)
print(_input0.isnull().sum())
print('-' * 50)
print('*' * 75)
print('Missing Percentage in Test Data ')
print('-' * 50)
print(round(100 * (_input0.isnull().sum() / len(_input0.index)), 2))
plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 1)
cols = ['r', 'c']
_input1['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', shadow=True, colors=cols)
plt.title('Survived')
plt.subplot(1, 2, 2)
sns.countplot('Survived', data=_input1, palette='PuRd')
plt.title('Survived')
plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 1)
cols = ['yellowgreen', 'lightcoral']
_input1['Sex'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', shadow=True, colors=cols)
plt.title('Total Male/Female onboard')
plt.subplot(1, 2, 2)
sns.barplot(x='Sex', y='Survived', data=_input1, palette='magma')
plt.title('Sex vs Survived')
plt.ylabel('Survival Rate')
plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 1)
cols = ['gold', 'lightcoral', 'lightblue']
_input1['Pclass'].value_counts().plot.pie(autopct='%1.1f%%', shadow=True, colors=cols)
plt.title('Number of Passengers by Class')
plt.subplot(1, 2, 2)
sns.barplot(x='Pclass', y='Survived', data=_input1, palette='cool')
plt.title('Pclass:Survived vs Dead')
plt.ylabel('Survival Rate')
plt.figure(figsize=(14, 8))
plt.subplot(1, 2, 1)
sns.barplot(x='Pclass', y='Survived', hue='Sex', data=_input1)
plt.ylabel('Survival Rate')
plt.title('Survival Rates Based on Gender and Class', fontweight='bold', size=20)
plt.subplot(1, 2, 2)
sns.barplot(x='Sex', y='Survived', hue='Pclass', data=_input1)
plt.ylabel('Survival Rate')
plt.title('Survival Rates Based on Gender and Class', fontweight='bold', size=20)
plt.subplots_adjust(right=1.7)
plt.figure(figsize=(14, 8))
plt.subplot(1, 2, 1)
_input1[_input1['Survived'] == 0].Age.plot.hist(bins=20, cmap='Set3')
plt.title('Survived', fontweight='bold', size=20)
plt.ylabel('Proportion')
plt.xlabel('Age')
plt.subplot(1, 2, 2)
_input1[_input1['Survived'] == 1].Age.plot.hist(bins=20, cmap='Pastel1')
plt.title("Didn't Survive", fontweight='bold', size=20)
x2 = list(range(0, 85, 5))
plt.subplots_adjust(right=1.7)
plt.ylabel('Proportion')
plt.xlabel('Age')
plt.figure(figsize=(12, 6))
sns.distplot(_input1[_input1['Survived'] == 0].Age, bins=20, kde=False, color='b', label='Died')
sns.distplot(_input1[_input1['Survived'] == 1].Age, bins=20, kde=False, color='r', label='Survived')
plt.title(' Age vs Survived/Died', fontweight='bold', size=20)
plt.legend()
plt.figure(figsize=(14, 8))
plt.subplot(1, 2, 1)
sns.violinplot('Pclass', 'Age', hue='Survived', data=_input1, palette='husl')
plt.title('Pclass and Age vs Survived', fontweight='bold', size=20)
plt.subplot(1, 2, 2)
sns.violinplot('Sex', 'Age', hue='Survived', data=_input1, palette='Set2')
plt.title('Sex and Age vs Survived', fontweight='bold', size=20)
plt.subplots_adjust(right=1.7)
plt.figure(figsize=(14, 8))
plt.subplot(1, 2, 1)
sns.barplot(x='Parch', y='Survived', data=_input1, palette='husl')
plt.title('Parent/Children vs Survival', fontweight='bold', size=20)
plt.subplot(1, 2, 2)
sns.barplot(x='Parch', y='Survived', hue='Pclass', data=_input1, palette='Set2')
plt.title('Parent/Children & Pclass vs Survival', fontweight='bold', size=20)
plt.subplots_adjust(right=1.7)
plt.figure(figsize=(14, 8))
plt.subplot(1, 2, 1)
sns.barplot(x='SibSp', y='Survived', data=_input1, palette='rocket')
plt.title('Sibling/Spouse vs Survival', fontweight='bold', size=20)
plt.subplot(1, 2, 2)
sns.barplot(x='SibSp', y='Survived', hue='Pclass', data=_input1, palette='rocket_r')
plt.title('Sibling/Spouse & Pclass vs Survival', fontweight='bold', size=20)
plt.subplots_adjust(right=1.7)
plt.figure(figsize=(15, 20))
plt.subplot(2, 2, 1)
sns.countplot('Embarked', data=_input1, palette='husl')
plt.title('Number of Passengers Boarded', fontweight='bold', size=20)
plt.subplot(2, 2, 2)
sns.countplot(x='Embarked', hue='Sex', data=_input1, palette='cool')
plt.title('Embarked: Female-Male', fontweight='bold', size=20)
plt.subplots_adjust(right=1.7)
plt.subplot(2, 2, 3)
sns.countplot(x='Embarked', hue='Pclass', data=_input1, palette='deep')
plt.title('Embarked vs Pclass', fontweight='bold', size=20)
plt.subplot(2, 2, 4)
sns.countplot(x='Embarked', hue='Survived', data=_input1, palette='rocket_r')
plt.title('Embarked vs Survived', fontweight='bold', size=20)
plt.subplots_adjust(right=1.7)
plt.figure(figsize=(15, 4))
plt.subplot(1, 3, 1)
sns.distplot(_input1[_input1['Pclass'] == 1].Fare, kde=False)
plt.title('Fares in Class 1')
plt.subplot(1, 3, 2)
sns.distplot(_input1[_input1['Pclass'] == 2].Fare, kde=False, color='y')
plt.title('Fares in Class 2')
plt.subplot(1, 3, 3)
sns.distplot(_input1[_input1['Pclass'] == 3].Fare, kde=False, color='g')
plt.title('Fares in Class 3')
plt.figure(figsize=(12, 8))
sns.heatmap(_input1.corr(), annot=True, cmap='RdYlGn')
titanic.head()
fare = titanic.sort_values(by=['Fare'], ascending=False)
fare[0:10]
age = titanic.sort_values(by=['Age'], ascending=False)
age[0:5]
sibsp = titanic.sort_values(by=['SibSp'], ascending=False)
sibsp[0:10]
parch = titanic.sort_values(by=['Parch'], ascending=False)
parch[0:10]
_input1 = _input1.drop('Cabin', axis=1, inplace=False)
_input0 = _input0.drop('Cabin', axis=1, inplace=False)
_input1['Age'] = _input1['Age'].fillna(_input1['Age'].median(), inplace=False)
_input0['Age'] = _input0['Age'].fillna(_input0['Age'].median(), inplace=False)
_input1['Embarked'].value_counts(normalize=True)
Embarked_mode = _input1['Embarked'].mode()[0]
Embarked_mode
_input1['Embarked'] = _input1['Embarked'].fillna('S', inplace=False)
_input0['Fare'] = _input0['Fare'].fillna(_input0['Fare'].median(), inplace=False)
print('Missing values in Train Data')
print('-' * 50)
print(_input1.isnull().sum())
print('-' * 50)
print('*' * 75)
print('Missing values in Test Data ')
print('-' * 50)
print(_input0.isnull().sum())
_input1['Sex'] = _input1['Sex'].map({'female': 0, 'male': 1})
_input0['Sex'] = _input0['Sex'].map({'female': 0, 'male': 1})
_input1['Embarked'] = _input1['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})
_input0['Embarked'] = _input0['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})
_input1.head()
_input1 = _input1.drop(['Name', 'Ticket'], axis=1, inplace=False)
_input0 = _input0.drop(['Name', 'Ticket'], axis=1, inplace=False)
_input1['Family'] = _input1['SibSp'] + _input1['Parch'] + 1
_input0['Family'] = _input0['SibSp'] + _input0['Parch'] + 1
_input1.head(5)
scaler = StandardScaler()
_input1[['Age', 'Fare']] = scaler.fit_transform(_input1[['Age', 'Fare']])
_input0[['Age', 'Fare']] = scaler.transform(_input0[['Age', 'Fare']])
_input1.head()
_input0.head()
X_train = _input1.drop(['Survived', 'PassengerId'], axis=1)
y_train = _input1['Survived']
X_test = _input0.drop('PassengerId', axis=1)
(X_train.shape, y_train.shape, X_test.shape)
print(X_train.columns)
print(X_test.columns)
Features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Family']
LR = LogisticRegression()