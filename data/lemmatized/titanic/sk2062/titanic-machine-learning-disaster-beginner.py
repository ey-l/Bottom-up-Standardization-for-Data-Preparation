import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
_input1 = pd.read_csv('data/input/titanic/train.csv')
_input0 = pd.read_csv('data/input/titanic/test.csv')
_input1.info()
_input1.head()
_input1.describe()
_input1.isnull().sum()
_input0.info()
median_1 = _input1['Age'].median()
_input1['Age'] = _input1['Age'].fillna(median_1, inplace=False)
median_2 = _input0['Age'].median()
_input0['Age'] = _input0['Age'].fillna(median_2, inplace=False)
a = _input1['Embarked'].value_counts()
print('Embarked Count:\n', a)
_input1[_input1['Embarked'].isnull()]
_input1['Embarked'] = _input1['Embarked'].fillna('S', inplace=False)
print('Count of Missing value for Fare Feature in Test Data: ', _input0['Fare'].isnull().sum())
_input0[_input0['Fare'].isnull()]
mean_fare = _input0[_input0['Pclass'] == 3]['Fare'].mean()
_input0['Fare'] = _input0['Fare'].fillna(mean_fare, inplace=False)
Id = _input0['PassengerId']
_input1 = _input1.drop(['PassengerId', 'Cabin', 'Ticket', 'Name'], axis=1)
_input0 = _input0.drop(['PassengerId', 'Cabin', 'Ticket', 'Name'], axis=1)
print('Check of Null Values for Train Dataset : \n', _input1.isnull().sum())
print('Check of Null Values for Test Dataset : \n', _input0.isnull().sum())
plt.figure(figsize=[14, 10])
plt.subplot(221)
_input1['Survived'].value_counts().plot(kind='bar', color='c', legend=True)
plt.xlabel('Not-Survived vs Survived')
plt.ylabel('Count')
plt.title('Distribution by Survival')
plt.subplot(222)
_input1['Pclass'].value_counts().plot(kind='bar', color='c', legend=True)
plt.xlabel('Classes')
plt.ylabel('Count')
plt.title('Distribution of People by class')
plt.subplot(223)
_input1['Sex'].value_counts().plot(kind='bar', color='c', legend=True)
plt.xlabel('Sex')
plt.ylabel('Count')
plt.title('Distribution of People by Sex')
plt.subplot(224)
_input1['Embarked'].value_counts().plot(kind='bar', color='c', legend=True)
plt.xlabel('Port of Embarkation')
plt.ylabel('Count')
plt.title('Distribution of People by Embarked')
grp_sex = _input1.groupby('Survived')['Sex'].value_counts()
grp_sex.unstack().plot(kind='bar')
plt.xlabel('Not-Survived vs Survived')
plt.ylabel('Count')
plt.title('Survival Distribution by Sex')
age_0_10 = _input1[_input1['Age'] < 10]['Age'].count()
age_10_20 = _input1[(_input1['Age'] >= 10) & (_input1['Age'] < 20)]['Age'].count()
age_20_30 = _input1[(_input1['Age'] >= 20) & (_input1['Age'] < 30)]['Age'].count()
age_30_40 = _input1[(_input1['Age'] >= 30) & (_input1['Age'] < 40)]['Age'].count()
age_40_50 = _input1[(_input1['Age'] >= 40) & (_input1['Age'] < 50)]['Age'].count()
age_50_60 = _input1[(_input1['Age'] >= 50) & (_input1['Age'] < 60)]['Age'].count()
age_60_70 = _input1[(_input1['Age'] >= 60) & (_input1['Age'] < 70)]['Age'].count()
age_70_80 = _input1[(_input1['Age'] >= 70) & (_input1['Age'] <= 80)]['Age'].count()
Age_dist = [age_0_10, age_10_20, age_20_30, age_30_40, age_40_50, age_50_60, age_60_70, age_70_80]
Age_graph = pd.DataFrame({'Age Range': ['0-10', '10-20', '20-30', '30-40', '40-50', '50-60', '60-70', '70-80'], 'Count': Age_dist})
Age_graph = Age_graph.set_index('Age Range', inplace=False)
Age_graph.plot(kind='bar', color='g')
plt.xlabel('Age Range')
plt.ylabel('Count')
plt.title('Distribution by Age')
grp_class = _input1.groupby('Survived')['Pclass'].value_counts()
grp_class.unstack().plot(kind='bar')
plt.xlabel('Not-Survived vs Survived')
plt.ylabel('Count')
plt.title('Survival Distribution by Class')
grp_emb = _input1.groupby('Survived')['Embarked'].value_counts()
grp_emb.unstack().plot(kind='bar', stacked=True)
plt.xlabel('Not-Survived vs Survived')
plt.ylabel('Count')
plt.title('Survival Distribution by Embarked')
plt.figure(figsize=(12, 9))
sns.countplot(x='SibSp', hue='Survived', data=_input1)
plt.title('Survival On Basis of Number of sibling')
plt.legend(loc='best')
plt.figure(figsize=(12, 9))
sns.countplot(x='Parch', hue='Survived', data=_input1)
plt.title('Survival On Basis of Number of Parent')
plt.legend()
age_0_10 = _input1[_input1['Age'] < 10]
age_10_20 = _input1[(_input1['Age'] >= 10) & (_input1['Age'] < 20)]
age_20_30 = _input1[(_input1['Age'] >= 20) & (_input1['Age'] < 30)]
age_30_40 = _input1[(_input1['Age'] >= 30) & (_input1['Age'] < 40)]
age_40_50 = _input1[(_input1['Age'] >= 40) & (_input1['Age'] < 50)]
age_50_60 = _input1[(_input1['Age'] >= 50) & (_input1['Age'] < 60)]
age_60_70 = _input1[(_input1['Age'] >= 60) & (_input1['Age'] < 70)]
age_70_80 = _input1[(_input1['Age'] >= 70) & (_input1['Age'] <= 80)]
x1 = age_0_10.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()
a1 = x1[x1['Survived'] == 0]['Count'].sum()
b1 = x1[x1['Survived'] == 1]['Count'].sum()
x2 = age_10_20.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()
a2 = x2[x2['Survived'] == 0]['Count'].sum()
b2 = x2[x2['Survived'] == 1]['Count'].sum()
x3 = age_20_30.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()
a3 = x3[x3['Survived'] == 0]['Count'].sum()
b3 = x3[x3['Survived'] == 1]['Count'].sum()
x4 = age_30_40.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()
a4 = x4[x4['Survived'] == 0]['Count'].sum()
b4 = x4[x4['Survived'] == 1]['Count'].sum()
x5 = age_40_50.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()
a5 = x5[x5['Survived'] == 0]['Count'].sum()
b5 = x5[x5['Survived'] == 1]['Count'].sum()
x6 = age_50_60.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()
a6 = x6[x6['Survived'] == 0]['Count'].sum()
b6 = x6[x6['Survived'] == 1]['Count'].sum()
x7 = age_60_70.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()
a7 = x7[x7['Survived'] == 0]['Count'].sum()
b7 = x7[x7['Survived'] == 1]['Count'].sum()
x8 = age_70_80.groupby('Age')['Survived'].value_counts().rename('Count').reset_index()
a8 = x8[x8['Survived'] == 0]['Count'].sum()
b8 = x8[x8['Survived'] == 1]['Count'].sum()
Age_distribution = pd.DataFrame({'Age Range': ['0-10', '10-20', '20-30', '30-40', '40-50', '50-60', '60-70', '70-80'], 'Not-Survived': [a1, a2, a3, a4, a5, a6, a7, a8], 'Survived': [b1, b2, b3, b4, b5, b6, b7, b8]})
Age_distribution = Age_distribution.set_index('Age Range', inplace=False)
Age_distribution.plot(kind='bar')
plt.ylabel('Count')
plt.title('Survival Distribution by Age Ranges')
sex_map = {'male': 0, 'female': 1}
_input1['Sex'] = _input1['Sex'].map(sex_map)
_input0['Sex'] = _input0['Sex'].map(sex_map)
embarked_map = {'S': 1, 'C': 2, 'Q': 3}
_input1['Embarked'] = _input1['Embarked'].map(embarked_map)
_input0['Embarked'] = _input0['Embarked'].map(embarked_map)
_input1.head()
_input0.head()
X = _input1.drop(['Survived'], axis=1)
y = _input1['Survived']
from sklearn.model_selection import train_test_split
(X_train, X_test, y_train, y_test) = train_test_split(X, y, test_size=0.3)
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
LR = LogisticRegression(solver='lbfgs')