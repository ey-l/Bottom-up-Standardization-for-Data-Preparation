import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
plt.style.use('ggplot')
_input1 = pd.read_csv('data/input/titanic/train.csv')
_input0 = pd.read_csv('data/input/titanic/test.csv')
train = _input1.copy()
test = _input0.copy()
print(train.info())
print(test.info())
print(train.describe())
print(test.describe())
print(train.isnull().sum())
print(test.isnull().sum())
print(train.columns)
print(test.columns)
train = train.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=False)
test = test.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=False)
train['Age'].median()
train['Embarked'].mode()[0]
train['Age'] = train['Age'].fillna(train['Age'].median(), inplace=False)
train['Embarked'] = train['Embarked'].fillna(train['Embarked'].mode()[0], inplace=False)
print(train.isnull().sum())
test['Age'].median()
test['Fare'].median()
test['Age'] = test['Age'].fillna(test['Age'].median(), inplace=False)
test['Fare'] = test['Fare'].fillna(test['Fare'].median(), inplace=False)
print(test.isnull().sum())
train['Survived'].value_counts()
train['Pclass'].value_counts()
train['Sex'].value_counts()
train['SibSp'].value_counts()
train['Parch'].value_counts()
train['Embarked'].value_counts()
test['Pclass'].value_counts()
test['Sex'].value_counts()
test['SibSp'].value_counts()
test['Parch'].value_counts()
test['Embarked'].value_counts()
plt.figure(figsize=(8, 6))
sns.countplot(x='Survived', data=train)
plt.figure(figsize=(8, 6))
sns.countplot(x='Sex', data=train)
plt.figure(figsize=(8, 6))
sns.countplot(x='Survived', hue='Sex', data=train)
plt.figure(figsize=(8, 6))
sns.countplot(x='Survived', hue='Pclass', data=train)
plt.figure(figsize=(8, 6))
sns.boxplot(x='Survived', y='Age', hue='Sex', data=train)
plt.figure(figsize=(8, 6))
sns.boxplot(x='Pclass', y='Fare', data=train)
plt.figure(figsize=(8, 6))
sns.countplot(x='Sex', data=test)
plt.figure(figsize=(8, 6))
sns.boxplot(x='Pclass', y='Fare', data=test)
train.plot(kind='box', figsize=(10, 8))
cols = ['Age', 'SibSp', 'Parch', 'Fare']
train[cols] = train[cols].clip(lower=train[cols].quantile(0.15), upper=train[cols].quantile(0.85), axis=1)
train = train.drop(columns=['Parch'], axis=1, inplace=False)
train.plot(kind='box', figsize=(10, 8))
test.plot(kind='box', figsize=(10, 8))
test[cols] = test[cols].clip(lower=test[cols].quantile(0.15), upper=test[cols].quantile(0.85), axis=1)
test = test.drop(columns=['Parch'], axis=1, inplace=False)
test.plot(kind='box', figsize=(10, 8))
train = pd.get_dummies(train, columns=['Pclass', 'Sex', 'Embarked'], drop_first=True)
test = pd.get_dummies(test, columns=['Pclass', 'Sex', 'Embarked'], drop_first=True)
train.head()
test.head()
X_train = train.iloc[:, 1:]
y_train = train['Survived'].values.reshape(-1, 1)
X_test = test
from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
features = ['Age', 'SibSp', 'Fare']
X_train[features] = ss.fit_transform(X_train[features])
X_test[features] = ss.fit_transform(X_test[features])
X_train.head()
X_test.head()
from sklearn.linear_model import LogisticRegression
clf = LogisticRegression()