import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
for (dirname, _, filenames) in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
train = pd.read_csv('data/input/spaceship-titanic/train.csv')
test = pd.read_csv('data/input/spaceship-titanic/test.csv')
df = pd.DataFrame()
train.info()
train.head()
train['Transported'] = train['Transported'].apply(lambda x: 0 if x == False else 1)
train.corr()['Transported'].sort_values(ascending=False)
train['id_group'] = train['PassengerId'].apply(lambda x: x[:4])
train['no_group'] = train['PassengerId'].apply(lambda x: x[-2:])
train['id_group'] = train['id_group'].astype(str)
train['no_group'] = train['no_group'].astype(str)
test['id_group'] = test['PassengerId'].apply(lambda x: x[:4])
test['no_group'] = test['PassengerId'].apply(lambda x: x[-2:])
test['id_group'] = test['id_group'].astype(str)
test['no_group'] = test['no_group'].astype(str)
train = train.drop('PassengerId', axis=1)
test = test.drop('PassengerId', axis=1)
train.head()
test.head()
train['HomePlanet'].unique()
train['HomePlanet'].isnull().sum()
train['HomePlanet'].value_counts().plot(kind='bar')
train['HomePlanet'] = train['HomePlanet'].fillna(method='ffill')
test['HomePlanet'] = test['HomePlanet'].fillna(method='ffill')
train.head()
train['HomePlanet'].isnull().sum()
train = pd.get_dummies(data=train, columns=['HomePlanet'])
test = pd.get_dummies(data=test, columns=['HomePlanet'])
test.head()
train['CryoSleep'].value_counts().plot(kind='bar')
train['CryoSleep'] = train['CryoSleep'].fillna(method='ffill')
test['CryoSleep'] = test['CryoSleep'].fillna(method='ffill')
train = pd.get_dummies(data=train, columns=['CryoSleep'])
test = pd.get_dummies(data=test, columns=['CryoSleep'])
test.head()
train['Cabin']
train['Cabin'].describe()
train['Cabin'].unique()
train['Cabin'].isnull().sum()
train['Cabin'] = train['Cabin'].fillna(method='bfill')
test['Cabin'] = test['Cabin'].fillna(method='bfill')
train['Cabin'].isnull().sum()
train['cabin_deck'] = train['Cabin'].apply(lambda x: str(x).split('/')[0])
train['cabin_number'] = train['Cabin'].apply(lambda x: str(x).split('/')[1])
train['cabin_side'] = train['Cabin'].apply(lambda x: str(x).split('/')[2])
test['cabin_deck'] = test['Cabin'].apply(lambda x: str(x).split('/')[0])
test['cabin_number'] = test['Cabin'].apply(lambda x: str(x).split('/')[1])
test['cabin_side'] = test['Cabin'].apply(lambda x: str(x).split('/')[2])
test.head()
train['cabin_side'] = train['cabin_side'].apply(lambda x: 1 if x == 'P' else 0)
test['cabin_side'] = test['cabin_side'].apply(lambda x: 1 if x == 'P' else 0)
train.head()
train = pd.get_dummies(data=train, columns=['cabin_deck'])
test = pd.get_dummies(data=test, columns=['cabin_deck'])
train.drop('Cabin', axis=1, inplace=True)
train.drop('CryoSleep_False', axis=1, inplace=True)
test.drop('Cabin', axis=1, inplace=True)
test.drop('CryoSleep_False', axis=1, inplace=True)
train['Destination'].unique()
train['Destination'].isnull().sum()
train['Destination'] = train['Destination'].fillna(method='ffill')
test['Destination'] = test['Destination'].fillna(method='ffill')
train['Destination'].isnull().sum()
train = pd.get_dummies(data=train, columns=['Destination'])
test = pd.get_dummies(data=test, columns=['Destination'])
test
train.corr()['Transported'].sort_values(ascending=False)[1:]
train['Age'].isnull().sum()
train['Age'].describe()
train['Age'] = train['Age'].fillna(train['Age'].mean())
test['Age'] = test['Age'].fillna(test['Age'].mean())
test['Age'].isnull().sum()
train['VIP']
train['VIP'] = train['VIP'].fillna(method='ffill')
test['VIP'] = test['VIP'].fillna(method='ffill')
train['VIP'] = train['VIP'].apply(lambda x: 1 if x == True else 0)
test['VIP'] = test['VIP'].apply(lambda x: 1 if x == True else 0)
train.corr()['Transported'].sort_values(ascending=False).plot(kind='bar')
train['Spa'] = train['Spa'].fillna(method='ffill')
train['VRDeck'] = train['VRDeck'].fillna(method='ffill')
train['ShoppingMall'] = train['ShoppingMall'].fillna(method='ffill')
train['FoodCourt'] = train['FoodCourt'].fillna(method='ffill')
train['RoomService'] = train['RoomService'].fillna(method='ffill')
test['Spa'] = test['Spa'].fillna(method='ffill')
test['VRDeck'] = test['VRDeck'].fillna(method='ffill')
test['ShoppingMall'] = test['ShoppingMall'].fillna(method='ffill')
test['FoodCourt'] = test['FoodCourt'].fillna(method='ffill')
test['RoomService'] = test['RoomService'].fillna(method='ffill')
train.head()
train = train.drop('Name', axis=1)
test = test.drop('Name', axis=1)
X_train = train.drop('Transported', axis=1)
y_train = train['Transported']
X_train.head()
X_test = test
X_train.columns
X_test.columns
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()