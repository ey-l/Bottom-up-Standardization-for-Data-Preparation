import warnings
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.feature_selection import RFE
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from statsmodels.stats.outliers_influence import variance_inflation_factor
sdf = pd.read_csv('data/input/spaceship-titanic/sample_submission.csv')
s_test = pd.read_csv('data/input/spaceship-titanic/test.csv')
s_train = pd.read_csv('data/input/spaceship-titanic/train.csv')
sdf.head()
s_test.head()
s_train.head()
s_train.info()
print(sdf.shape)
print(s_test.shape)
print(s_train.shape)
s_train.HomePlanet.value_counts()
s_train.Destination.value_counts()
s_train.Cabin.value_counts()
s_train.drop(['Cabin', 'Name'], axis=1, inplace=True)
s_test.drop(['Cabin', 'Name'], axis=1, inplace=True)
s_train.isnull().sum()
s_train1 = s_train
s_train = s_train.dropna()
s_test['VIP'] = s_test['VIP'].fillna(0)
s_test['VIP'] = s_test['VIP'].astype(np.int64)
s_test['CryoSleep'] = s_test['CryoSleep'].fillna(0)
s_test['CryoSleep'] = s_test['CryoSleep'].astype(np.int64)
s_test.isnull().sum()
temp2 = s_test.select_dtypes(include=np.number)
temp2 = list(temp2)
for i in temp2:
    s_test[i] = s_test[i].fillna(s_test[i].mean())
s_test['HomePlanet'] = s_test['HomePlanet'].fillna(s_test['HomePlanet'].mode()[0])
s_test['Destination'] = s_test['Destination'].fillna(s_test['Destination'].mode()[0])
s_test.isnull().sum()
s_test.isnull().sum()
print(sdf.shape)
print(s_test.shape)
print(s_train.shape)
numeric_tempcol = s_train.select_dtypes(include=np.number)
temp = s_train.select_dtypes(include=np.number)
col = list(temp.columns)
n = np.arange(0, len(col))
plt.figure(figsize=(20, 15))
for (i, j) in zip(col, n):
    plt.subplot(3, 3, j + 1)
    sns.boxplot(s_train[i])
plt.tight_layout(pad=1.08, h_pad=3)
temp2 = s_test.select_dtypes(include=np.number)
col2 = list(temp2.columns)
n2 = np.arange(0, len(col2))
plt.figure(figsize=(15, 9))
for (i, j2) in zip(col2, n2):
    plt.subplot(2, 4, j2 + 1)
    sns.boxplot(s_test[i], color='green')
plt.tight_layout(pad=1.08, h_pad=3, w_pad=3)
s_train['Age'] = s_train['Age'].apply(lambda x: 60 if x > 60 else x)
s_test['Age'] = s_test['Age'].apply(lambda x: 60 if x > 60 else x)
s_train['RoomService'] = s_train['RoomService'].apply(lambda x: 200 if x > 200 else x)
s_test['RoomService'] = s_test['RoomService'].apply(lambda x: 200 if x > 200 else x)
s_train['FoodCourt'] = s_train['FoodCourt'].apply(lambda x: 200 if x > 200 else x)
s_test['FoodCourt'] = s_test['FoodCourt'].apply(lambda x: 200 if x > 200 else x)
s_train['ShoppingMall'] = s_train['ShoppingMall'].apply(lambda x: 200 if x > 200 else x)
s_test['ShoppingMall'] = s_test['ShoppingMall'].apply(lambda x: 200 if x > 200 else x)
s_train['Spa'] = s_train['Spa'].apply(lambda x: 200 if x > 200 else x)
s_test['Spa'] = s_test['Spa'].apply(lambda x: 200 if x > 200 else x)
s_train['VRDeck'] = s_train['VRDeck'].apply(lambda x: 200 if x > 200 else x)
s_test['VRDeck'] = s_test['VRDeck'].apply(lambda x: 200 if x > 200 else x)
s_train['Transported'] = s_train['Transported'].apply(lambda x: 1 if x == True else 0)
s_train['CryoSleep'] = s_train['CryoSleep'].apply(lambda x: 1 if x == True else 0)
s_test['CryoSleep'] = s_test['CryoSleep'].apply(lambda x: 1 if x == True else 0)
s_train['VIP'] = s_train['VIP'].apply(lambda x: 1 if x == True else 0)
s_test['VIP'] = s_test['VIP'].apply(lambda x: 1 if x == True else 0)
s_train.info()
sns.set_style('darkgrid')
sns.distplot(s_train['VRDeck'])
plt.figure(figsize=(15, 7))
plt.subplot(2, 4, 1)
sns.barplot(data=s_train, x='VIP', y='VRDeck', hue='Transported')
plt.subplot(2, 4, 2)
sns.barplot(data=s_train, x='VIP', y='Spa', hue='Transported')
plt.subplot(2, 4, 3)
sns.barplot(data=s_train, x='CryoSleep', y='VIP', hue='Transported')
plt.subplot(2, 4, 4)
sns.barplot(data=s_train, x='CryoSleep', y='VRDeck', hue='Transported')
plt.subplot(2, 4, 5)
sns.barplot(data=s_train, x='VIP', y='FoodCourt', palette='hls')
plt.subplot(2, 4, 6)
sns.barplot(data=s_train, x='Transported', y='RoomService', palette='hls')
plt.subplot(2, 4, 7)
sns.barplot(data=s_train, x='Transported', y='Age', palette='hls')
plt.subplot(2, 4, 8)
sns.barplot(data=s_train, x='CryoSleep', y='VRDeck', palette='hls')
plt.tight_layout()
sns.jointplot(data=s_train, x='Age', y='ShoppingMall', color='salmon')
s_test.shape
dummy_1 = pd.get_dummies(data=s_train, columns=['HomePlanet'], drop_first=True)
dummy_2 = pd.get_dummies(data=dummy_1, columns=['Destination'], drop_first=True)
s_train = dummy_2
s_train.head()
dummy_t1 = pd.get_dummies(data=s_test, columns=['HomePlanet'], drop_first=True)
dummy_t2 = pd.get_dummies(data=dummy_t1, columns=['Destination'], drop_first=True)
s_test = dummy_t2
s_test.head()
sc = StandardScaler()
a = list(numeric_tempcol.columns)
s_train[a] = sc.fit_transform(s_train[a])
s_test[a] = sc.fit_transform(s_test[a])
plt.figure(figsize=(12, 7), facecolor='lightgrey')
sns.heatmap(s_train[a].corr(), annot=True, cmap='terrain_r', linecolor='black', linewidth='0.1')
train_y = s_train.pop('Transported')
s_train1 = s_train.iloc[:, 1:]
s_test1 = s_test.iloc[:, 1:]
s_train_const = sm.add_constant(s_train1)
lr1 = sm.GLM(train_y, s_train_const, family=sm.families.Binomial())