import pandas as pd
train = pd.read_csv('_data/input/competitive-data-science-predict-future-sales/sales_train.csv')
test = pd.read_csv('_data/input/competitive-data-science-predict-future-sales/test.csv')
print('Number of rows and columns:', train.shape)
print('')
print('Columns :')
print(train.dtypes)
print('')
print('First rows:')
print(train.head(5))
print(train['shop_id'].nunique())
print(train['item_id'].nunique())
print(train['date'].nunique())
print(train['date_block_num'].nunique())
print(test.shape)
print(test.dtypes)
print(test['shop_id'].nunique())
print(test['item_id'].nunique())
train_monthly = train.groupby(['date_block_num', 'shop_id', 'item_id']).agg({'item_cnt_day': 'sum'})
train_monthly.columns = ['item_cnt_month']
train_monthly = train_monthly.reset_index()
print(train_monthly.shape)
print(train_monthly.head(3))
import matplotlib.pyplot as plt
shop_item_history = train_monthly.groupby(['date_block_num']).agg({'shop_id': 'nunique', 'item_id': 'nunique'})
plt.rcParams['figure.figsize'] = (20, 5)
(fig, axes) = plt.subplots(nrows=1, ncols=2)
shop_item_history.plot(y='shop_id', label='number of shops', ax=axes[0])
shop_item_history.plot(y='item_id', label='number of items', ax=axes[1])

print(shop_item_history.tail())
print('There are {} shops and {} items in the test data'.format(test['shop_id'].nunique(), test['item_id'].nunique()))
shops_train = list(train_monthly['shop_id'].unique())
shops_test = list(test['shop_id'].unique())
items_train = list(train_monthly['item_id'].unique())
items_test = list(test['item_id'].unique())
print('All shops in the test file are in the train file : {}'.format(set(shops_test).issubset(set(shops_train))))
print('All items in the test file are in the train file : {}'.format(set(items_test).issubset(set(items_train))))
new_items = set(items_test).difference(items_train)
print('There are {} new items out of {} in the test file. This is {:.1f}%'.format(len(new_items), len(items_test), len(new_items) / len(items_test) * 100.0))
train_mean = train_monthly.groupby(['shop_id', 'item_id']).agg({'item_cnt_month': 'mean'}).reset_index()
print('There are {} pairs (shop_id,item_id) in the train file'.format(len(train_mean)))
shop_item_train = train_mean[['shop_id', 'item_id']].apply(tuple, axis=1).tolist()
shop_item_test = test[['shop_id', 'item_id']].apply(tuple, axis=1).tolist()
new_shop_item = set(shop_item_test).difference(shop_item_train)
print('There are {} new pairs (shop,item) out of {} in the test file. This is {:.1f}%'.format(len(new_shop_item), len(shop_item_test), len(new_shop_item) / len(shop_item_test) * 100.0))
train_total_monthly = train_monthly.groupby(['date_block_num']).agg({'item_cnt_month': 'sum'}).reset_index()
train_total_monthly.plot(y='item_cnt_month')

from scipy.optimize import curve_fit

def f(x, A, B):
    return A * x + B
(popt, pcov) = curve_fit(f, train_total_monthly['date_block_num'], train_total_monthly['item_cnt_month'])
print('The fitting line equation is: item_cnt_month = {:.0f} x date_block_num + {:.0f}'.format(popt[0], popt[1]))
plt.plot(train_total_monthly['date_block_num'], train_total_monthly['item_cnt_month'], label='item_cnt_month')
plt.plot(train_total_monthly['date_block_num'], f(train_total_monthly['date_block_num'], popt[0], popt[1]), label='fitting line')
plt.legend(loc='upper right')

print('Based on extrapolation, we expect a total sales count of {:.0f} for the test month'.format(f(34, popt[0], popt[1])))
print('Nov13 / Oct13 is {:.4f}'.format(train_total_monthly.iloc[10]['item_cnt_month'] / train_total_monthly.iloc[9]['item_cnt_month']))
print('Nov14 / Oct14 is {:.4f}'.format(train_total_monthly.iloc[22]['item_cnt_month'] / train_total_monthly.iloc[21]['item_cnt_month']))
print('Based on extrapolation and seasonality, we expect a total sales count of {:.0f} for the test month'.format(1.0582 * train_total_monthly.iloc[33]['item_cnt_month']))
print(train_mean.head(5))
print('')
print('train_mean number of rows and columns:', train_mean.shape)
test = pd.merge(test, train_mean, on=['shop_id', 'item_id'], how='left')
print(test.head(10))
print('there are {} NaN. That is {:.1f}% of the rows.'.format(test['item_cnt_month'].isnull().sum(), test['item_cnt_month'].isnull().sum() / len(test) * 100.0))
test.fillna(0, inplace=True)
test['item_cnt_month'] = test['item_cnt_month'].clip(0, 20)
print('There are {:.0f} item sold in total in the test Dataframe.'.format(test['item_cnt_month'].sum()))
test['item_cnt_month'] = test['item_cnt_month'] * 75191.0 / 202192.0
submission = test[['ID', 'item_cnt_month']]
