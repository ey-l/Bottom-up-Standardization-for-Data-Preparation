import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.simplefilter('ignore')
df = pd.read_csv('data/input/uciml_pima-indians-diabetes-database/diabetes.csv')
df.head()
df.shape
df.isna().sum()
df.dtypes
df.describe()
(fig, ax) = plt.subplots(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, fmt='.1g', cmap='viridis', cbar=False)
plt.style.use('seaborn')
(fig, ax) = plt.subplots(figsize=(7, 7))
plt.pie(x=df['Outcome'].value_counts(), colors=['seagreen', 'firebrick'], labels=['Non-Diabetic', 'Diabetic'], shadow=True, explode=(0, 0.1))

df[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']] = df[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']].replace(0, np.nan)
df.isnull().sum()
for col in ['Glucose', 'BloodPressure', 'SkinThickness', 'BMI', 'Insulin']:
    df[col] = df[col].fillna(df[col].median())
plt.style.use('seaborn')
(fig, ax) = plt.subplots(3, 3, figsize=(20, 25))
sns.histplot(df['Age'], ax=ax[0, 0], color='darkorange', kde=True)
ax[0, 0].set_xlabel('Age', fontsize=15)
sns.histplot(df['Pregnancies'], ax=ax[0, 1], color='darkorange', kde=True)
ax[0, 1].set_xlabel('Pregnancies', fontsize=15)
sns.histplot(df['BloodPressure'], ax=ax[0, 2], color='darkorange', kde=True)
ax[0, 2].set_xlabel('BloodPressure', fontsize=15)
sns.histplot(x=df['BMI'], ax=ax[1, 0], color='mediumblue', kde=True)
ax[1, 0].set_xlabel('BMI', fontsize=15)
sns.histplot(x=df['Glucose'], ax=ax[1, 1], color='mediumblue', kde=True)
ax[1, 1].set_xlabel('Glucose', fontsize=15)
sns.histplot(x=df['Insulin'], ax=ax[1, 2], color='mediumblue', kde=True)
ax[1, 2].set_xlabel('Insulin', fontsize=15)
sns.histplot(x=df['DiabetesPedigreeFunction'], ax=ax[2, 0], color='darkgreen', kde=True)
ax[2, 0].set_xlabel('DiabetesPedigreeFunction', fontsize=15)
sns.histplot(x=df['SkinThickness'], ax=ax[2, 1], color='darkgreen', kde=True)
ax[2, 1].set_xlabel('SkinThickness', fontsize=15)
sns.histplot(x=df['Outcome'], ax=ax[2, 2], color='darkgreen', kde=True)
ax[2, 2].set_xlabel('Outcome', fontsize=15)
plt.style.use('seaborn')
(fig, ax) = plt.subplots(4, 2, figsize=(20, 25))
sns.histplot(x=df['Age'], hue=df['Outcome'], palette='rocket', kde=True, ax=ax[0, 0])
ax[0, 0].set_xlabel('Age', fontsize=15)
sns.histplot(x=df['Pregnancies'], hue=df['Outcome'], palette='rocket', kde=True, ax=ax[0, 1])
ax[0, 1].set_xlabel('Pregnancies', fontsize=15)
sns.histplot(x=df['Insulin'], hue=df['Outcome'], palette='dark', kde=True, ax=ax[1, 0])
ax[1, 0].set_xlabel('Insulin', fontsize=15)
sns.histplot(x=df['Glucose'], hue=df['Outcome'], palette='dark', kde=True, ax=ax[1, 1])
ax[1, 1].set_xlabel('Glucose', fontsize=15)
sns.histplot(x=df['BMI'], hue=df['Outcome'], palette='flare', kde=True, ax=ax[2, 0])
ax[2, 0].set_xlabel('BMI', fontsize=15)
sns.histplot(x=df['BloodPressure'], hue=df['Outcome'], palette='flare', kde=True, ax=ax[2, 1])
ax[2, 1].set_xlabel('BloodPressure', fontsize=15)
sns.histplot(x=df['SkinThickness'], hue=df['Outcome'], palette='viridis', kde=True, ax=ax[3, 0])
ax[3, 0].set_xlabel('SkinThickness', fontsize=15)
sns.histplot(x=df['DiabetesPedigreeFunction'], hue=df['Outcome'], palette='viridis', kde=True, ax=ax[3, 1])
ax[3, 1].set_xlabel('DiabetesPedigreeFunction', fontsize=15)
plt.style.use('seaborn')
(fig, ax) = plt.subplots(2, 2, figsize=(20, 15))
sns.scatterplot(x=df['Glucose'], y=df['Age'], hue=df['Outcome'], palette='viridis', legend=True, ax=ax[0, 0])
plt.legend(title='Result', loc='upper left', labels=['Healthy', 'Diabetic'])
sns.scatterplot(x=df['BloodPressure'], y=df['Age'], hue=df['Outcome'], palette='spring_r', legend=True, ax=ax[0, 1])
plt.legend(title='Result', loc='upper left', labels=['Healthy', 'Diabetic'])
sns.scatterplot(x=df['BMI'], y=df['Age'], hue=df['Outcome'], palette='flare_r', legend=True, ax=ax[1, 0])
plt.legend(title='Result', labels=['Healthy', 'Diabetic'])
sns.scatterplot(x=df['Insulin'], y=df['Age'], hue=df['Outcome'], palette='hls', legend=True, ax=ax[1, 1])
plt.legend(title='Result', labels=['Healthy', 'Diabetic'])
df.head()
X = df.drop('Outcome', axis=1)
X.head()
y = df['Outcome']
y.head()
from sklearn.model_selection import train_test_split
(X_train, X_test, y_train, y_test) = train_test_split(X, y, test_size=0.2, random_state=42)
(len(X_train), len(X_test))
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()